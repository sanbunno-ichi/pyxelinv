import pyxel

#---------------------------------------------------------------------------------------------------
#更新履歴

#07.24.2024 公開
#07.23.2024 効果音歩行音のみ変更（Version 0.97）
#07.23.2024 ランキング、ネームエントリー組み込み
#07.22.2024 効果音を入れた（frenchbreadさん作成の「Pyxel RPG SE パック」） 
#07.21.2024 JS版最新化対応（Version 0.96）
#07.19.2024 WEB化時ESCキー無効化
#09.19.2024 バーチャルゲームパッド対応
#07.18.2024 タイトル描画方法変更
#07.18.2024 ゲームパッドに対応
#07.18.2024 Version 05.08.2020 python-invから簡易移植
#---------------------------------------------------------------------------------------------------
# キャラクタデータ

# １ドット４ドット	（座標はＸのみ（Ｙは固定））
# タイトル上
#  0 1 2 3 4 5 6 7 8 9 a b c d e f 101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f
#0:■■■■■■■□□■■■□□□□■■■■■■□□□□□□□■■□■■■■■■■□■□□□□□□□
t_dottblup_0 = [0 for dot in range(0x1c)]
t_dottblup_0 = [
	0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x09,
	0x0a,0x0b,0x10,0x11,0x12,0x13,0x14,0x15,
	0x1d,0x1e,0x20,0x21,0x22,0x23,0x24,0x25,
	0x26,0x28,
	0xff,0xff]

#  0 1 2 3 4 5 6 7 8 9 a b c d e f 101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f
#1:■■■■■■■■□■■■□□□□■■■□■■□□□□□□□■■□■■■■■■■■■□□□□□□□
t_dottblup_1 = [0 for dot in range(0x1d)]
t_dottblup_1 = [
	0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,
	0x09,0x0a,0x0b,0x10,0x11,0x12,0x14,0x15,
	0x1d,0x1e,0x20,0x21,0x22,0x23,0x24,0x25,
	0x26,0x27,0x28,
	0xff,0xff]

#  0 1 2 3 4 5 6 7 8 9 a b c d e f 101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f
#2:■■■■■■■■■■■■□□□□■■■□■■■□□□□□■■■□■■■■■■■■■□□□□□□□
t_dottblup_2 = [0 for dot in range(0x20)]
t_dottblup_2 = [
	0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,
	0x08,0x09,0x0a,0x0b,0x10,0x11,0x12,0x14,
	0x15,0x16,0x1c,0x1d,0x1e,0x20,0x21,0x22,
	0x23,0x24,0x25,0x26,0x27,0x28,
	0xff,0xff]

#  0 1 2 3 4 5 6 7 8 9 a b c d e f 101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f
#3:■■■■■■■■■□■■■□□■■■□□■■■□□□□■■■□□■■■■■■■■■□□□□□□□
t_dottblup_3 = [0 for dot in range(0x20)]
t_dottblup_3 = [
	0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,
	0x08,0x0a,0x0b,0x0c,0x0f,0x10,0x11,0x14,
	0x15,0x16,0x1b,0x1c,0x1d,0x20,0x21,0x22,
	0x23,0x24,0x25,0x26,0x27,0x28,
	0xff,0xff]

#  0 1 2 3 4 5 6 7 8 9 a b c d e f 101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f
#4:■■■□□□■■■□■■■□□■■■□□□■■■□□□■■□□■■■□□□□□■■□□□□□□□
t_dottblup_4 = [0 for dot in range(0x20)]
t_dottblup_4 = [
	0x00,0x01,0x02,0x06,0x07,0x08,0x0a,0x0b,
	0x0c,0x0f,0x10,0x11,0x15,0x16,0x17,0x1b,
	0x1c,0x1f,0x20,0x21,0x27,0x28,
	0xff,0xff]

#  0 1 2 3 4 5 6 7 8 9 a b c d e f 101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f
#5:■■■□□□■■■□■■■□□■■■□□□■■■□□■■■□□■■■□□□□□■■□□□□□□□
t_dottblup_5 = [0 for dot in range(0x21)]
t_dottblup_5 = [
	0x00,0x01,0x02,0x06,0x07,0x08,0x0a,0x0b,
	0x0c,0x0f,0x10,0x11,0x15,0x16,0x17,0x1a,
	0x1b,0x1c,0x1f,0x20,0x21,0x27,0x28,
	0xff,0xff]

#  0 1 2 3 4 5 6 7 8 9 a b c d e f 101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f
#6:■■■□□□■■■□□■■■■■■□□□□□■■■■■■□□□■■■□□□□□■■□□□□□□□
t_dottblup_6 = [0 for dot in range(0x21)]
t_dottblup_6 = [
	0x00,0x01,0x02,0x06,0x07,0x08,0x0b,0x0c,
	0x0d,0x0e,0x0f,0x10,0x16,0x17,0x18,0x19,
	0x1a,0x1b,0x1f,0x20,0x21,0x27,0x28,
	0xff,0xff]

#  0 1 2 3 4 5 6 7 8 9 a b c d e f 101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f
#7:■■■■■■■■■□□□■■■■□□□□□□■■■■■□□□□■■■■■□□□■■□□□□□□□
t_dottblup_7 = [0 for dot in range(0x1b)]
t_dottblup_7 = [
	0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,
	0x08,0x0c,0x0d,0x0e,0x0f,0x16,0x17,0x18,
	0x19,0x1a,0x1f,0x20,0x21,0x22,0x23,0x27,
	0x28,
	0xff,0xff]

#  0 1 2 3 4 5 6 7 8 9 a b c d e f 101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f
#8:□■■■■■■■□□□□■■■■□□□□□□□■■■□□□□■■■■■■□□□■■□□□□□□□
t_dottblup_8 = [0 for dot in range(0x21)]
t_dottblup_8 = [
	0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,
	0x0c,0x0d,0x0e,0x0f,0x17,0x18,0x19,0x1e,
	0x1f,0x20,0x21,0x22,0x23,0x27,0x28,
	0xff,0xff]

#  0 1 2 3 4 5 6 7 8 9 a b c d e f 101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f
#9:□■■■■■■□□□□□□■■□□□□□□□□■■■□□□□■■■■■■□□□■■□□□□□□□
t_dottblup_9 = [0 for dot in range(0x16)]
t_dottblup_9 = [
	0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x0d,
	0x0e,0x17,0x18,0x19,0x1e,0x1f,0x20,0x21,
	0x22,0x23,0x27,0x28,
	0xff,0xff]

#  0 1 2 3 4 5 6 7 8 9 a b c d e f 101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f
#a:□■■■□□□□□□□□□■■□□□□□□□■■■■□□□■■■□□□□□□□■■□□□□□□□
t_dottblup_a = [0 for dot in range(0x10)]
t_dottblup_a = [
	0x01,0x02,0x03,0x0d,0x0e,0x16,0x17,0x18,
	0x19,0x1d,0x1e,0x1f,0x27,0x28,
	0xff,0xff]

#  0 1 2 3 4 5 6 7 8 9 a b c d e f 101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f
#b:□■■■□□□□□□□□□■■□□□□□□■■■■■■□□■■■□□□□□□□■■□□□□□□■
t_dottblup_b = [0 for dot in range(0x13)]
t_dottblup_b = [
	0x01,0x02,0x03,0x0d,0x0e,0x15,0x16,0x17,
	0x18,0x19,0x1a,0x1d,0x1e,0x1f,0x27,0x28,
	0x2f,
	0xff,0xff]

#  0 1 2 3 4 5 6 7 8 9 a b c d e f 101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f
#c:□■■■□□□□□□□□□■■□□□□□■■■□■■■□□■■■□□□□□□□■■□□□□□□■
t_dottblup_c = [0 for dot in range(0x23)]
t_dottblup_c = [
	0x01,0x02,0x03,0x0d,0x0e,0x14,0x15,0x16,
	0x18,0x19,0x1a,0x1d,0x1e,0x1f,0x27,0x28,
	0x2f,
	0xff,0xff]

#  0 1 2 3 4 5 6 7 8 9 a b c d e f 101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f
#d:□■■■□□□□□□□□■■■□□□□■■■□□□■■■□■■■■■■□□□□■■□□□□□■■
t_dottblup_d = [0 for dot in range(0x18)]
t_dottblup_d = [
	0x01,0x02,0x03,0x0c,0x0d,0x0e,0x13,0x14,
	0x15,0x19,0x1a,0x1b,0x1d,0x1e,0x1f,0x20,
	0x21,0x22,0x27,0x28,0x2e,0x2f,
	0xff,0xff]

#  0 1 2 3 4 5 6 7 8 9 a b c d e f 101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f
#e:□■■■□□□□□□□□■■■□□□■■■□□□□■■■□■■■■■■□□□□■■■■■■■■■
t_dottblup_e = [0 for dot in range(0x1d)]
t_dottblup_e = [
	0x01,0x02,0x03,0x0c,0x0d,0x0e,0x12,0x13,
	0x14,0x19,0x1a,0x1b,0x1d,0x1e,0x1f,0x20,
	0x21,0x22,0x27,0x28,0x29,0x2a,0x2b,0x2c,
	0x2d,0x2e,0x2f,
	0xff,0xff]

#  0 1 2 3 4 5 6 7 8 9 a b c d e f 101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f
#f:□■■■□□□□□□□□■■■□□■■■□□□□□□■■■■■■■■■□□□□■■■■■■■■■
t_dottblup_f = [0 for dot in range(0x1d)]
t_dottblup_f = [
	0x01,0x02,0x03,0x0c,0x0d,0x0e,0x11,0x12,
	0x13,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f,0x20,
	0x21,0x22,0x27,0x28,0x29,0x2a,0x2b,0x2c,
	0x2d,0x2e,0x2f,
	0xff,0xff]
	
#（３２）タイトル下
#  0 1 2 3 4 5 6 7 8 9 a b c d e f 101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f 
#0:□■■□■■□□■■□■■□□■■□□□■□□□■■■■□□■■■■■□■■■■□□□■■■□□
t_dottbldn_0 = [0 for dot in range(0x32)]
t_dottbldn_0 = [
	0x01,0x02,0x04,0x05,0x08,0x09,0x0b,0x0c,0x0f,
	0x10,0x14,0x18,0x19,0x1a,0x1b,0x1e,0x1f,
	0x20,0x21,0x22,0x24,0x25,0x26,0x27,0x2b,0x2c,0x2d,
	0xff,0xff]

#  0 1 2 3 4 5 6 7 8 9 a b c d e f 101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f 
#1:□■■□■■□□■■□■■□□■■□□■■■□□■■□■■□■■□□□□■■□■■□■■□■■□
t_dottbldn_1 = [0 for dot in range(0x32)]
t_dottbldn_1 = [
	0x01,0x02,0x04,0x05,0x08,0x09,0x0b,0x0c,0x0f,
	0x10,0x13,0x14,0x15,0x18,0x19,0x1b,0x1c,0x1e,0x1f,
	0x24,0x25,0x27,0x28,0x2a,0x2b,0x2d,0x2e,
	0xff,0xff]

#  0 1 2 3 4 5 6 7 8 9 a b c d e f 101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f 
#2:□■■□■■■□■■□■■□□■■□■■□■■□■■□■■□■■□□□□■■□■■□■■□□□□
t_dottbldn_2 = [0 for dot in range(0x32)]
t_dottbldn_2 = [
	0x01,0x02,0x04,0x05,0x06,0x08,0x09,0x0b,0x0c,0x0f,
	0x10,0x12,0x13,0x15,0x16,0x18,0x19,0x1b,0x1c,0x1e,0x1f,
	0x24,0x25,0x27,0x28,0x2a,0x2b,
	0xff,0xff]

#  0 1 2 3 4 5 6 7 8 9 a b c d e f 101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f 
#3:□■■□■■■■■■□■■□□■■□■■□■■□■■□■■□■■□□□□■■□■■□■■□□□□
t_dottbldn_3 = [0 for dot in range(0x32)]
t_dottbldn_3 = [
	0x01,0x02,0x04,0x05,0x06,0x07,0x08,0x09,0x0b,0x0c,0x0f,
	0x10,0x12,0x13,0x15,0x16,0x18,0x19,0x1b,0x1c,0x1e,0x1f,
	0x24,0x25,0x27,0x28,0x2a,0x2b,
	0xff,0xff]

#  0 1 2 3 4 5 6 7 8 9 a b c d e f 101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f 
#4:□■■□■■■■■■□□■■■■□□■■■■■□■■□■■□■■■■□□■■■■□□□■■■■□
t_dottbldn_4 = [0 for dot in range(0x32)]
t_dottbldn_4 = [
	0x01,0x02,0x04,0x05,0x06,0x07,0x08,0x09,0x0c,0x0d,0x0e,0x0f,
	0x12,0x13,0x14,0x15,0x16,0x18,0x19,0x1b,0x1c,0x1e,0x1f,
	0x20,0x21,0x24,0x25,0x26,0x27,0x2b,0x2c,0x2d,0x2e,
	0xff,0xff]

#  0 1 2 3 4 5 6 7 8 9 a b c d e f 101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f 
#5:□■■□■■□■■■□□■■■■□□■■□■■□■■□■■□■■□□□□■■□■■□□□□■■□
t_dottbldn_5 = [0 for dot in range(0x32)]
t_dottbldn_5 = [
	0x01,0x02,0x04,0x05,0x07,0x08,0x09,0x0c,0x0d,0x0e,0x0f,
	0x12,0x13,0x15,0x16,0x18,0x19,0x1b,0x1c,0x1e,0x1f,
	0x24,0x25,0x27,0x28,0x2d,0x2e,
	0xff,0xff]

#  0 1 2 3 4 5 6 7 8 9 a b c d e f 101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f 
#6:□■■□■■□□■■□□□■■□□□■■□■■□■■□■■□■■□□□□■■□■■□■■□■■□
t_dottbldn_6 = [0 for dot in range(0x32)]
t_dottbldn_6 = [
	0x01,0x02,0x04,0x05,0x08,0x09,0x0d,0x0e,
	0x12,0x13,0x15,0x16,0x18,0x19,0x1b,0x1c,0x1e,0x1f,
	0x24,0x25,0x27,0x28,0x2a,0x2b,0x2d,0x2e,
	0xff,0xff]

#  0 1 2 3 4 5 6 7 8 9 a b c d e f 101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f 
#7:□■■□■■□□■■□□□■■□□□■■□■■□■■■■□□■■■■■□■■□■■□□■■■□□
t_dottbldn_7 = [0 for dot in range(0x32)]
t_dottbldn_7 = [
	0x01,0x02,0x04,0x05,0x08,0x09,0x0d,0x0e,
	0x12,0x13,0x15,0x16,0x18,0x19,0x1a,0x1b,0x1e,0x1f,
	0x20,0x21,0x22,0x24,0x25,0x27,0x28,0x2b,0x2c,0x2d,
	0xff,0xff]
	
# タイトル上ベタ
#  0 1 2 3 4 5 6 7 8 9 a b c d e f 101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f
#0:■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
t_dottblup_h = [0 for dot in range(0x32)]
t_dottblup_h = [
	0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,
	0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f,
	0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,
	0xff,0xff]

# タイトル下ベタ
#  0 1 2 3 4 5 6 7 8 9 a b c d e f 101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f
#0:■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
t_dottbldn_h = [0 for dot in range(0x32)]
t_dottbldn_h = [
	0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,
	0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f,
	0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,
	0xff,0xff]

#---------------------------------------------------------------------------------------------------
# キャラクタデータ
#（０） ＵＦＯボーナスポイント５０
#  0 1 2 3 4 5 6 7 8 9 a b c d e f 1011121314151617 
#0:□□□□□□□□□□□□□□□□□□□□□□□□
#1:□□□□□□□□□■■■■■□□□□■■■□□□
#2:□□□□□□□□□■□□□□□□□■□□□■□□
#3:□□□□□□□□□■□□□□□□□■□□■■□□
#4:□□□□□□□□□■■■■□□□□■□■□■□□
#5:□□□□□□□□□□□□□■□□□■■□□■□□
#6:□□□□□□□□□■□□□■□□□■□□□■□□
#7:□□□□□□□□□□■■■□□□□□■■■□□□
o_dottbl0 = [0 for dot in range(0x4a)]
o_dottbl0 = [
	0x09,0x01,0x0a,0x01,0x0b,0x01,0x0c,0x01,0x0d,0x01,0x09,0x02,0x09,0x03,0x09,0x04,
	0x0a,0x04,0x0b,0x04,0x0c,0x04,0x0d,0x05,0x0d,0x06,0x0c,0x07,0x0b,0x07,0x0a,0x07,
	0x09,0x06,0x12,0x01,0x13,0x01,0x14,0x01,0x11,0x02,0x11,0x03,0x11,0x04,0x11,0x05,
	0x11,0x06,0x12,0x07,0x13,0x07,0x14,0x07,0x15,0x02,0x15,0x03,0x15,0x04,0x15,0x05,
	0x15,0x06,0x12,0x05,0x13,0x04,0x14,0x03,0xff,0xff]

#（１）ＵＦＯボーナスポイント１００
#  0 1 2 3 4 5 6 7 8 9 a b c d e f 101112131415161718191a1b1c1d1e1f
#0:□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□
#1:□□□□□□□■□□□□□□■■■□□□□□■■■□□□□□□□
#2:□□□□□□■■□□□□□■□□□■□□□■□□□■□□□□□□
#3:□□□□□■□■□□□□□■□□■■□□□■□□■■□□□□□□
#4:□□□□□□□■□□□□□■□■□■□□□■□■□■□□□□□□
#5:□□□□□□□■□□□□□■■□□■□□□■■□□■□□□□□□
#6:□□□□□□□■□□□□□■□□□■□□□■□□□■□□□□□□
#7:□□□□□■■■■■□□□□■■■□□□□□■■■□□□□□□□
o_dottbl1 = [0 for dot in range(0x68)]
o_dottbl1 = [
	0x07,0x01,0x07,0x02,0x07,0x03,0x07,0x04,0x07,0x05,0x07,0x06,0x06,0x02,0x05,0x03,
	0x05,0x07,0x06,0x07,0x07,0x07,0x08,0x07,0x09,0x07,0x0e,0x01,0x0f,0x01,0x10,0x01,
	0x0d,0x02,0x0d,0x03,0x0d,0x04,0x0d,0x05,0x0d,0x06,0x0e,0x07,0x0f,0x07,0x10,0x07,
	0x11,0x02,0x11,0x03,0x11,0x04,0x11,0x05,0x11,0x06,0x0e,0x05,0x0f,0x04,0x10,0x03,
	0x16,0x01,0x17,0x01,0x18,0x01,0x15,0x02,0x15,0x03,0x15,0x04,0x15,0x05,0x15,0x06,
	0x16,0x07,0x17,0x07,0x18,0x07,0x19,0x02,0x19,0x03,0x19,0x04,0x19,0x05,0x19,0x06,
	0x16,0x05,0x17,0x04,0x18,0x03,0xff,0xff]
	
#（２）ＵＦＯボーナスポイント１５０
#  0 1 2 3 4 5 6 7 8 9 a b c d e f 101112131415161718191a1b1c1d1e1f
#0:□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□
#1:□□□□□□□■□□□□□■■■■■□□□□■■■□□□□□□□
#2:□□□□□□■■□□□□□■□□□□□□□■□□□■□□□□□□
#3:□□□□□■□■□□□□□■□□□□□□□■□□■■□□□□□□
#4:□□□□□□□■□□□□□■■■■□□□□■□■□■□□□□□□
#5:□□□□□□□■□□□□□□□□□■□□□■■□□■□□□□□□
#6:□□□□□□□■□□□□□■□□□■□□□■□□□■□□□□□□
#7:□□□□□■■■■■□□□□■■■□□□□□■■■□□□□□□□
o_dottbl2 = [0 for dot in range(0x64)]
o_dottbl2 = [
	0x07,0x01,0x07,0x02,0x07,0x03,0x07,0x04,0x07,0x05,0x07,0x06,0x06,0x02,0x05,0x03,
	0x05,0x07,0x06,0x07,0x07,0x07,0x08,0x07,0x09,0x07,0x0d,0x01,0x0e,0x01,0x0f,0x01,
	0x10,0x01,0x11,0x01,0x0d,0x02,0x0d,0x03,0x0d,0x04,0x0e,0x04,0x0f,0x04,0x10,0x04,
	0x11,0x05,0x11,0x06,0x10,0x07,0x0f,0x07,0x0e,0x07,0x0d,0x06,0x16,0x01,0x17,0x01,
	0x18,0x01,0x15,0x02,0x15,0x03,0x15,0x04,0x15,0x05,0x15,0x06,0x16,0x07,0x17,0x07,
	0x18,0x07,0x19,0x02,0x19,0x03,0x19,0x04,0x19,0x05,0x19,0x06,0x16,0x05,0x17,0x04,
	0x18,0x03,0xff,0xff]

#（３）ＵＦＯボーナスポイント３００
#  0 1 2 3 4 5 6 7 8 9 a b c d e f 101112131415161718191a1b1c1d1e1f 
#0:□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□
#1:□□□□□□■■■□□□□□■■■□□□□□■■■□□□□□□□
#2:□□□□□■□□□■□□□■□□□■□□□■□□□■□□□□□□
#3:□□□□□□□□□■□□□■□□■■□□□■□□■■□□□□□□
#4:□□□□□□□■■□□□□■□■□■□□□■□■□■□□□□□□
#5:□□□□□□□□□■□□□■■□□■□□□■■□□■□□□□□□
#6:□□□□□■□□□■□□□■□□□■□□□■□□□■□□□□□□
#7:□□□□□□■■■□□□□□■■■□□□□□■■■□□□□□□□
o_dottbl3 = [0 for dot in range(0x6a)]
o_dottbl3 = [
	0x05,0x02,0x06,0x01,0x07,0x01,0x08,0x01,0x09,0x02,0x09,0x03,0x07,0x04,0x08,0x04,
	0x09,0x05,0x09,0x06,0x08,0x07,0x07,0x07,0x06,0x07,0x05,0x06,0x0e,0x01,0x0f,0x01,
	0x10,0x01,0x0d,0x02,0x0d,0x03,0x0d,0x04,0x0d,0x05,0x0d,0x06,0x0e,0x07,0x0f,0x07,
	0x10,0x07,0x11,0x02,0x11,0x03,0x11,0x04,0x11,0x05,0x11,0x06,0x0e,0x05,0x0f,0x04,
	0x10,0x03,0x16,0x01,0x17,0x01,0x18,0x01,0x15,0x02,0x15,0x03,0x15,0x04,0x15,0x05,
	0x15,0x06,0x16,0x07,0x17,0x07,0x18,0x07,0x19,0x02,0x19,0x03,0x19,0x04,0x19,0x05,
	0x19,0x06,0x16,0x05,0x17,0x04,0x18,0x03,0xff,0xff]

#（４）縦長爆発
#  0 1 2 3 4 5 6 7 8 9 a b c d e f 
#0:□□□□□□□■□□□□□□□□
#1:□□□□□■□□□■□□□□□□
#2:□□□□□□□■■□□□□□□□
#3:□□□□□□■■■■□□□□□□
#4:□□□□□■□■■■□□□□□□
#5:□□□□□□■■■■■□□□□□
#6:□□□□□■■■■□□□□□□□
#7:□□□□□□■□■□■□□□□□
o_dottbl4 = [0 for dot in range(0x34)]
o_dottbl4 = [
	0x07,0x00,0x05,0x01,0x09,0x01,0x07,0x02,0x08,0x02,0x06,0x03,0x07,0x03,0x08,0x03,
	0x09,0x03,0x05,0x04,0x07,0x04,0x08,0x04,0x09,0x04,0x06,0x05,0x07,0x05,0x08,0x05,
	0x09,0x05,0x0a,0x05,0x05,0x06,0x07,0x06,0x08,0x06,0x09,0x06,0x06,0x07,0x08,0x07,
	0x0a,0x07,0xff,0xff]

#（５）横長爆発
#  0 1 2 3 4 5 6 7 8 9 a b c d e f 
#0:□□□■□□□■□□■□□□□□
#1:□□□□□■□□□■□□□□□□
#2:□□□□■■■■■■□□□□□□
#3:□□□■■■■■■■■□□□□□
#4:□□□■■■■■■■■□□□□□
#5:□□□□□■■■■■□□□□□□
#6:□□□□□■□□■□□□□□□□
#7:□□□■□□□■□□■□□□□□
o_dottbl5 = [0 for dot in range(0x4a)]
o_dottbl5 = [
	0x03,0x00,0x07,0x00,0x0a,0x00,0x05,0x01,0x09,0x01,0x04,0x02,0x05,0x02,0x06,0x02,
	0x07,0x02,0x08,0x02,0x09,0x02,0x03,0x03,0x04,0x03,0x05,0x03,0x06,0x03,0x07,0x03,
	0x08,0x03,0x09,0x03,0x0a,0x03,0x04,0x04,0x05,0x04,0x06,0x04,0x07,0x04,0x08,0x04,
	0x09,0x04,0x0a,0x04,0x05,0x05,0x06,0x05,0x07,0x05,0x08,0x05,0x09,0x05,0x05,0x06,
	0x08,0x06,0x03,0x07,0x07,0x07,0x0a,0x07,0xff,0xff]

#（６）レインボー０
#  0 1 2 3 4 5 6 7 8 9 a b c d e f 
#0:□□□□□□□□□□□□□□□□
#1:□□□□□□□□□□□□□□□□
#2:□■□□□□□□□□□□□□□□
#3:□■□□□□□□□□□□□□□□
#4:□■□□□□□□□□□□□□□□
#5:□□□□□□□□□□□□□□□□
#6:□□□□□□□□□□□□□□□□
#7:□□□□□□□□□□□□□□□□
o_dottbl6 = [0 for dot in range(0x08)]
o_dottbl6 = [
	0x01,0x02,0x01,0x03,0x01,0x04,0xff,0xff]

#（７）レインボー１
#  0 1 2 3 4 5 6 7 8 9 a b c d e f 
#0:□□□□□□□□□□□□□□□□
#1:□□□□□□□□□□□□□□□□
#2:□■□□□□□□□□□□□□□□
#3:□■□□□□□□□□□□□□□□
#4:□■□□□□□□□□□□□□□□
#5:□□□□□□□□□□□□□□□□
#6:□□□□□□□□□□□□□□□□
#7:□■□□□□□□□□□□□□□□
o_dottbl7 = [0 for dot in range(0x0a)]
o_dottbl7 = [
	0x01,0x02,0x01,0x03,0x01,0x04,0x01,0x07,0xff,0xff]

#（８）インベーダー００
#  0 1 2 3 4 5 6 7 8 9 a b c d e f 
#0:□□□□□□■■□□□□□□□□
#1:□□□□□■■■■□□□□□□□
#2:□□□□■■■■■■□□□□□□
#3:□□□■□□■■□□■□□□□□
#4:□□□■■■■■■■■□□□□□
#5:□□□□■□■■□■□□□□□□
#6:□□□■□□□□□□■□□□□□
#7:□□□□■□□□□■□□□□□□
o_dottbl8 = [0 for dot in range(0x42)]
o_dottbl8 = [
	0x06,0x00,0x07,0x00,0x05,0x01,0x06,0x01,0x07,0x01,0x08,0x01,0x04,0x02,0x05,0x02,
	0x06,0x02,0x07,0x02,0x08,0x02,0x09,0x02,0x03,0x03,0x06,0x03,0x07,0x03,0x0a,0x03,
	0x03,0x04,0x04,0x04,0x05,0x04,0x06,0x04,0x07,0x04,0x08,0x04,0x09,0x04,0x0a,0x04,
	0x04,0x05,0x06,0x05,0x07,0x05,0x09,0x05,0x03,0x06,0x0a,0x06,0x04,0x07,0x09,0x07,
	0xff,0xff]

#（９）インベーダー０１
#  0 1 2 3 4 5 6 7 8 9 a b c d e f 
#0:□□□□□□■■□□□□□□□□
#1:□□□□□■■■■□□□□□□□
#2:□□□□■■■■■■□□□□□□
#3:□□□■□□■■□□■□□□□□
#4:□□□■■■■■■■■□□□□□
#5:□□□□□■□□■□□□□□□□
#6:□□□□■□■■□■□□□□□□
#7:□□□■□■□□■□■□□□□□
o_dottbl9 = [0 for dot in range(0x46)]
o_dottbl9 = [
	0x06,0x00,0x07,0x00,0x05,0x01,0x06,0x01,0x07,0x01,0x08,0x01,0x04,0x02,0x05,0x02,
	0x06,0x02,0x07,0x02,0x08,0x02,0x09,0x02,0x03,0x03,0x06,0x03,0x07,0x03,0x0a,0x03,
	0x03,0x04,0x04,0x04,0x05,0x04,0x06,0x04,0x07,0x04,0x08,0x04,0x09,0x04,0x0a,0x04,
	0x05,0x05,0x08,0x05,0x04,0x06,0x06,0x06,0x07,0x06,0x09,0x06,0x03,0x07,0x05,0x07,
	0x08,0x07,0x0a,0x07,0xff,0xff]

#（Ａ）インベーダー１０
#  0 1 2 3 4 5 6 7 8 9 a b c d e f 
#0:□□□□■□□□□□■□□□□□
#1:□□□□□■□□□■□□□□□□
#2:□□□□■■■■■■■□□□□□
#3:□□□■■□□■□□■■□□□□
#4:□□■■■■■■■■■■■□□□
#5:□□■□■■■■■■■□■□□□
#6:□□■□■□□□□□■□■□□□
#7:□□□□□■■□■■□□□□□□
o_dottbla = [0 for dot in range(0x5a)]
o_dottbla = [
	0x04,0x00,0x0a,0x00,0x05,0x01,0x09,0x01,0x04,0x02,0x05,0x02,0x06,0x02,0x07,0x02,
	0x08,0x02,0x09,0x02,0x0a,0x02,0x03,0x03,0x04,0x03,0x07,0x03,0x0a,0x03,0x0b,0x03,
	0x02,0x04,0x03,0x04,0x04,0x04,0x05,0x04,0x06,0x04,0x07,0x04,0x08,0x04,0x09,0x04,
	0x0a,0x04,0x0b,0x04,0x0c,0x04,0x02,0x05,0x04,0x05,0x05,0x05,0x06,0x05,0x07,0x05,
	0x08,0x05,0x09,0x05,0x0a,0x05,0x0c,0x05,0x02,0x06,0x04,0x06,0x0a,0x06,0x0c,0x06,
	0x05,0x07,0x06,0x07,0x08,0x07,0x09,0x07,0xff,0xff]

#（Ｂ）インベーダー１１
#  0 1 2 3 4 5 6 7 8 9 a b c d e f 
#0:□□□□■□□□□□■□□□□□
#1:□□■□□■□□□■□□■□□□
#2:□□■□■■■■■■■□■□□□
#3:□□■■■□□■□□■■■□□□
#4:□□■■■■■■■■■■■□□□
#5:□□□■■■■■■■■■□□□□
#6:□□□□■□□□□□■□□□□□
#7:□□□■□□□□□□□■□□□□
o_dottblb = [0 for dot in range(0x5e)]
o_dottblb = [
	0x04,0x00,0x0a,0x00,0x02,0x01,0x05,0x01,0x09,0x01,0x0c,0x01,0x02,0x02,0x04,0x02,
	0x05,0x02,0x06,0x02,0x07,0x02,0x08,0x02,0x09,0x02,0x0a,0x02,0x0c,0x02,0x02,0x03,
	0x03,0x03,0x04,0x03,0x07,0x03,0x0a,0x03,0x0b,0x03,0x0c,0x03,0x02,0x04,0x03,0x04,
	0x04,0x04,0x05,0x04,0x06,0x04,0x07,0x04,0x08,0x04,0x09,0x04,0x0a,0x04,0x0b,0x04,
	0x0c,0x04,0x03,0x05,0x04,0x05,0x05,0x05,0x06,0x05,0x07,0x05,0x08,0x05,0x09,0x05,
	0x0a,0x05,0x0b,0x05,0x04,0x06,0x0a,0x06,0x03,0x07,0x0b,0x07,0xff,0xff]

#（Ｃ）インベーダー２０
#  0 1 2 3 4 5 6 7 8 9 a b c d 
#0:□□□□□■■■■□□□□□
#1:□□■■■■■■■■■■□□
#2:□■■■■■■■■■■■■□
#3:□■■□□■■■■□□■■□
#4:□■■■■■■■■■■■■□
#5:□□□■■■□□■■■□□□
#6:□□■■□□■■□□■■□□
#7:□□□■■□□□□■■□□□
o_dottblc = [0 for dot in range(0x7e)]
o_dottblc = [
	0x05,0x00,0x06,0x00,0x07,0x00,0x08,0x00,0x02,0x01,0x03,0x01,0x04,0x01,0x05,0x01,
	0x06,0x01,0x07,0x01,0x08,0x01,0x09,0x01,0x0a,0x01,0x0b,0x01,0x01,0x02,0x02,0x02,
	0x03,0x02,0x04,0x02,0x05,0x02,0x06,0x02,0x07,0x02,0x08,0x02,0x09,0x02,0x0a,0x02,
	0x0b,0x02,0x0c,0x02,0x01,0x03,0x02,0x03,0x05,0x03,0x06,0x03,0x07,0x03,0x08,0x03,
	0x0b,0x03,0x0c,0x03,0x01,0x04,0x02,0x04,0x03,0x04,0x04,0x04,0x05,0x04,0x06,0x04,
	0x07,0x04,0x08,0x04,0x09,0x04,0x0a,0x04,0x0b,0x04,0x0c,0x04,0x03,0x05,0x04,0x05,
	0x05,0x05,0x08,0x05,0x09,0x05,0x0a,0x05,0x02,0x06,0x03,0x06,0x06,0x06,0x07,0x06,
	0x0a,0x06,0x0b,0x06,0x03,0x07,0x04,0x07,0x09,0x07,0x0a,0x07,0xff,0xff]

#（Ｄ）インベーダー２１
#  0 1 2 3 4 5 6 7 8 9 a b c d 
#0:□□□□□■■■■□□□□□
#1:□□■■■■■■■■■■□□
#2:□■■■■■■■■■■■■□
#3:□■■□□■■■■□□■■□
#4:□■■■■■■■■■■■■□
#5:□□□□■■□□■■□□□□
#6:□□□■■□■■□■■□□□
#7:□■■□□□□□□□□■■□
o_dottbld = [0 for dot in range(0x7c)]
o_dottbld = [
	0x05,0x00,0x06,0x00,0x07,0x00,0x08,0x00,0x02,0x01,0x03,0x01,0x04,0x01,0x05,0x01,
	0x06,0x01,0x07,0x01,0x08,0x01,0x09,0x01,0x0a,0x01,0x0b,0x01,0x01,0x02,0x02,0x02,
	0x03,0x02,0x04,0x02,0x05,0x02,0x06,0x02,0x07,0x02,0x08,0x02,0x09,0x02,0x0a,0x02,
	0x0b,0x02,0x0c,0x02,0x01,0x03,0x02,0x03,0x05,0x03,0x06,0x03,0x07,0x03,0x08,0x03,
	0x0b,0x03,0x0c,0x03,0x01,0x04,0x02,0x04,0x03,0x04,0x04,0x04,0x05,0x04,0x06,0x04,
	0x07,0x04,0x08,0x04,0x09,0x04,0x0a,0x04,0x0b,0x04,0x0c,0x04,0x04,0x05,0x05,0x05,
	0x08,0x05,0x09,0x05,0x03,0x06,0x04,0x06,0x06,0x06,0x07,0x06,0x09,0x06,0x0a,0x06,
	0x01,0x07,0x02,0x07,0x0b,0x07,0x0c,0x07,0xff,0xff]
	
#（Ｅ)プレイヤー
#  0 1 2 3 4 5 6 7 8 9 a b c d e 
#0:□□□□□□□■□□□□□□□
#1:□□□□□□■■■□□□□□□
#2:□□□□□□■■■□□□□□□
#3:□□■■■■■■■■■■■□□
#4:□■■■■■■■■■■■■■□
#5:□■■■■■■■■■■■■■□
#6:□■■■■■■□■■■■■■□
#7:□■■■■■□□□■■■■■□
o_dottble = [0 for dot in range(0x86)]
o_dottble = [
	0x07,0x00,0x06,0x01,0x07,0x01,0x08,0x01,0x06,0x02,0x07,0x02,0x08,0x02,0x02,0x03,
	0x03,0x03,0x04,0x03,0x05,0x03,0x06,0x03,0x07,0x03,0x08,0x03,0x09,0x03,0x0a,0x03,
	0x0b,0x03,0x0c,0x03,0x01,0x04,0x02,0x04,0x03,0x04,0x04,0x04,0x05,0x04,0x06,0x04,
	0x07,0x04,0x08,0x04,0x09,0x04,0x0a,0x04,0x0b,0x04,0x0c,0x04,0x0d,0x04,0x01,0x05,
	0x02,0x05,0x03,0x05,0x04,0x05,0x05,0x05,0x06,0x05,0x07,0x05,0x08,0x05,0x09,0x05,
	0x0a,0x05,0x0b,0x05,0x0c,0x05,0x0d,0x05,0x01,0x06,0x02,0x06,0x03,0x06,0x04,0x06,
	0x05,0x06,0x06,0x06,0x08,0x06,0x09,0x06,0x0a,0x06,0x0b,0x06,0x0c,0x06,0x0d,0x06,
	0x01,0x07,0x02,0x07,0x03,0x07,0x04,0x07,0x05,0x07,0x09,0x07,0x0a,0x07,0x0b,0x07,
	0x0c,0x07,0x0d,0x07,0xff,0xff]

#（Ｆ）砦
#  0 1 2 3 4 5 6 7 8 9 a b c d e f 10111213
#0:□□□□□■■■■■■■■■■□□□□□
#1:□□□■■■■■■■■■■■■■■□□□
#2:□□■■■■■■■■■■■■■■■■□□
#3:□■■■■■■■■■■■■■■■■■■□
#4:■■■■■■■■■■■■■■■■■■■■
#5:■■■□■■□■■■■■■□■■□■■■
#6:■■■□■■□■■■■■■□■■□■■■
#7:■■■□■■□■■■■■■□■■□■■■
#8:■■■■■■■■■■■■■■■■■■■■
#9:■■■■■■■■■■■■■■■■■■■■
#a:■■■■■■■■■■■■■■■■■■■■
#b:■■■■■■■■■■■■■■■■■■■■
#c:■■■■■■■■■■■■■■■■■■■■
#d:■■■■■■■□□□□□□■■■■■■■
#e:■■■■■■□□□□□□□□■■■■■■
#f:■■■■■□□□□□□□□□□■■■■■
o_dottblf = [0 for dot in range(0x20e)]
o_dottblf = [
	0x05,0x00,0x06,0x00,0x07,0x00,0x08,0x00,0x09,0x00,0x0a,0x00,0x0b,0x00,0x0c,0x00,
	0x0d,0x00,0x0e,0x00,0x03,0x01,0x04,0x01,0x05,0x01,0x06,0x01,0x07,0x01,0x08,0x01,
	0x09,0x01,0x0a,0x01,0x0b,0x01,0x0c,0x01,0x0d,0x01,0x0e,0x01,0x0f,0x01,0x10,0x01,
	0x02,0x02,0x03,0x02,0x04,0x02,0x05,0x02,0x06,0x02,0x07,0x02,0x08,0x02,0x09,0x02,
	0x0a,0x02,0x0b,0x02,0x0c,0x02,0x0d,0x02,0x0e,0x02,0x0f,0x02,0x10,0x02,0x11,0x02,
	0x01,0x03,0x02,0x03,0x03,0x03,0x04,0x03,0x05,0x03,0x06,0x03,0x07,0x03,0x08,0x03,
	0x09,0x03,0x0a,0x03,0x0b,0x03,0x0c,0x03,0x0d,0x03,0x0e,0x03,0x0f,0x03,0x10,0x03,
	0x11,0x03,0x12,0x03,0x00,0x04,0x01,0x04,0x02,0x04,0x03,0x04,0x04,0x04,0x05,0x04,
	0x06,0x04,0x07,0x04,0x08,0x04,0x09,0x04,0x0a,0x04,0x0b,0x04,0x0c,0x04,0x0d,0x04,
	0x0e,0x04,0x0f,0x04,0x10,0x04,0x11,0x04,0x12,0x04,0x13,0x04,0x00,0x05,0x01,0x05,
	0x02,0x05,0x04,0x05,0x05,0x05,0x07,0x05,0x08,0x05,0x09,0x05,0x0a,0x05,0x0b,0x05,
	0x0c,0x05,0x0e,0x05,0x0f,0x05,0x11,0x05,0x12,0x05,0x13,0x05,0x00,0x06,0x01,0x06,
	0x02,0x06,0x04,0x06,0x05,0x06,0x07,0x06,0x08,0x06,0x09,0x06,0x0a,0x06,0x0b,0x06,
	0x0c,0x06,0x0e,0x06,0x0f,0x06,0x11,0x06,0x12,0x06,0x13,0x06,0x00,0x07,0x01,0x07,
	0x02,0x07,0x04,0x07,0x05,0x07,0x07,0x07,0x08,0x07,0x09,0x07,0x0a,0x07,0x0b,0x07,
	0x0c,0x07,0x0e,0x07,0x0f,0x07,0x11,0x07,0x12,0x07,0x13,0x07,0x00,0x08,0x01,0x08,
	0x02,0x08,0x03,0x08,0x04,0x08,0x05,0x08,0x06,0x08,0x07,0x08,0x08,0x08,0x09,0x08,
	0x0a,0x08,0x0b,0x08,0x0c,0x08,0x0d,0x08,0x0e,0x08,0x0f,0x08,0x10,0x08,0x11,0x08,
	0x12,0x08,0x13,0x08,0x00,0x09,0x01,0x09,0x02,0x09,0x03,0x09,0x04,0x09,0x05,0x09,
	0x06,0x09,0x07,0x09,0x08,0x09,0x09,0x09,0x0a,0x09,0x0b,0x09,0x0c,0x09,0x0d,0x09,
	0x0e,0x09,0x0f,0x09,0x10,0x09,0x11,0x09,0x12,0x09,0x13,0x09,0x00,0x0a,0x01,0x0a,
	0x02,0x0a,0x03,0x0a,0x04,0x0a,0x05,0x0a,0x06,0x0a,0x07,0x0a,0x08,0x0a,0x09,0x0a,
	0x0a,0x0a,0x0b,0x0a,0x0c,0x0a,0x0d,0x0a,0x0e,0x0a,0x0f,0x0a,0x10,0x0a,0x11,0x0a,
	0x12,0x0a,0x13,0x0a,0x00,0x0b,0x01,0x0b,0x02,0x0b,0x03,0x0b,0x04,0x0b,0x05,0x0b,
	0x06,0x0b,0x07,0x0b,0x08,0x0b,0x09,0x0b,0x0a,0x0b,0x0b,0x0b,0x0c,0x0b,0x0d,0x0b,
	0x0e,0x0b,0x0f,0x0b,0x10,0x0b,0x11,0x0b,0x12,0x0b,0x13,0x0b,0x00,0x0c,0x01,0x0c,
	0x02,0x0c,0x03,0x0c,0x04,0x0c,0x05,0x0c,0x06,0x0c,0x07,0x0c,0x08,0x0c,0x09,0x0c,
	0x0a,0x0c,0x0b,0x0c,0x0c,0x0c,0x0d,0x0c,0x0e,0x0c,0x0f,0x0c,0x10,0x0c,0x11,0x0c,
	0x12,0x0c,0x13,0x0c,0x00,0x0d,0x01,0x0d,0x02,0x0d,0x03,0x0d,0x04,0x0d,0x05,0x0d,
	0x06,0x0d,0x0d,0x0d,0x0e,0x0d,0x0f,0x0d,0x10,0x0d,0x11,0x0d,0x12,0x0d,0x13,0x0d,
	0x00,0x0e,0x01,0x0e,0x02,0x0e,0x03,0x0e,0x04,0x0e,0x05,0x0e,0x0e,0x0e,0x0f,0x0e,
	0x10,0x0e,0x11,0x0e,0x12,0x0e,0x13,0x0e,0x00,0x0f,0x01,0x0f,0x02,0x0f,0x03,0x0f,
	0x04,0x0f,0x0f,0x0f,0x10,0x0f,0x11,0x0f,0x12,0x0f,0x13,0x0f,0xff,0xff]

#（１０）UFO
#  0 1 2 3 4 5 6 7 8 9 a b c d e f 1011
#0:□□□□□□□■■■■□□□□□□□
#1:□□□□□■■■■■■■■□□□□□
#2:□□□■■■■■■■■■■■■□□□
#3:□□■□□■□□■■□□■□□■□□
#4:□■■■■■■■■■■■■■■■■□
#5:□□□■■■□□■■■□□■■■□□
#6:□□□□■□□□□□□□□□■□□□
o_dottbl10 = [0 for dot in range(0x72)]
o_dottbl10 = [
	0x07,0x00,0x08,0x00,0x09,0x00,0x0a,0x00,0x05,0x01,0x06,0x01,0x07,0x01,0x08,0x01,
	0x09,0x01,0x0a,0x01,0x0b,0x01,0x0c,0x01,0x03,0x02,0x04,0x02,0x05,0x02,0x06,0x02,
	0x07,0x02,0x08,0x02,0x09,0x02,0x0a,0x02,0x0b,0x02,0x0c,0x02,0x0d,0x02,0x0e,0x02,
	0x02,0x03,0x05,0x03,0x08,0x03,0x0c,0x03,0x0f,0x03,0x01,0x04,0x02,0x04,0x03,0x04,
	0x04,0x04,0x05,0x04,0x06,0x04,0x07,0x04,0x08,0x04,0x09,0x04,0x0a,0x04,0x0b,0x04,
	0x0c,0x04,0x0d,0x04,0x0e,0x04,0x0f,0x04,0x10,0x04,0x03,0x05,0x04,0x05,0x05,0x05,
	0x08,0x05,0x09,0x05,0x0a,0x05,0x0d,0x05,0x0e,0x05,0x0f,0x05,0x04,0x06,0x0e,0x06,
	0xff,0xff]

#（１１)プレイヤーの弾
#  0 1 2 3 4 5 6 7 8 9 a b c d e 
#0:□□□□□□□□□□□□□□□
#1:□□□□□□□■□□□□□□□
#2:□□□□□□□■□□□□□□□
#3:□□□□□□□■□□□□□□□
#4:□□□□□□□■□□□□□□□
#5:□□□□□□□■□□□□□□□
#6:□□□□□□□■□□□□□□□
#7:□□□□□□□□□□□□□□□
o_dottbl11 = [0 for dot in range(0x0e)]
o_dottbl11 = [
	0x07,0x01,0x07,0x02,0x07,0x03,0x07,0x04,0x07,0x05,0x07,0x06,0xff,0xff]

#（１２）インベーダー弾０１
#  0 1 2 3 4 5 6 7 8 9 a b c d e f 
#0:□□□□□□□□□□□□□□□□
#1:□□□□□□□■□□□□□□□□
#2:□□□□□□□■□□□□□□□□
#3:□□□□□□□■□□□□□□□□
#4:□□□□□□□■□□□□□□□□
#5:□□□□□□□■□□□□□□□□
#6:□□□□□□□■□□□□□□□□
#7:□□□□□□□■□□□□□□□□
#8:□□□□□□□■□□□□□□□□
#9:□□□□□□□■□□□□□□□□
#a:□□□□□□□□□□□□□□□□
o_dottbl12 = [0 for dot in range(0x14)]
o_dottbl12 = [
	0x07,0x01,0x07,0x02,0x07,0x03,0x07,0x04,0x07,0x05,0x07,0x06,0x07,0x07,0x07,0x08,
	0x07,0x09,0xff,0xff]

#（１３）インベーダー弾０１
#  0 1 2 3 4 5 6 7 8 9 a b c d e f 
#0:□□□□□□□□□□□□□□□□
#1:□□□□□□□■□□□□□□□□
#2:□□□□□□□■□□□□□□□□
#3:□□□□□□□■□□□□□□□□
#4:□□□□□□□■□□□□□□□□
#5:□□□□□□□■□□□□□□□□
#6:□□□□□□□■□□□□□□□□
#7:□□□□□□□■□□□□□□□□
#8:□□□□□□■■■□□□□□□□
#9:□□□□□□□■□□□□□□□□
#a:□□□□□□□□□□□□□□□□
o_dottbl13 = [0 for dot in range(0x18)]
o_dottbl13 = [
	0x07,0x01,0x07,0x02,0x07,0x03,0x07,0x04,0x07,0x05,0x07,0x06,0x07,0x07,0x06,0x08,
	0x07,0x08,0x08,0x08,0x07,0x09,0xff,0xff]

#（１４）インベーダー弾０１
#  0 1 2 3 4 5 6 7 8 9 a b c d e f 
#0:□□□□□□□□□□□□□□□□
#1:□□□□□□□■□□□□□□□□
#2:□□□□□□□■□□□□□□□□
#3:□□□□□□□■□□□□□□□□
#4:□□□□□□□■□□□□□□□□
#5:□□□□□□■■■□□□□□□□
#6:□□□□□□□■□□□□□□□□
#7:□□□□□□□■□□□□□□□□
#8:□□□□□□□■□□□□□□□□
#9:□□□□□□□■□□□□□□□□
#a:□□□□□□□□□□□□□□□□
o_dottbl14 = [0 for dot in range(0x18)]
o_dottbl14 = [
	0x07,0x01,0x07,0x02,0x07,0x03,0x07,0x04,0x06,0x05,0x07,0x05,0x08,0x05,0x07,0x06,
	0x07,0x07,0x07,0x08,0x07,0x09,0xff,0xff]

#（１５）インベーダー弾０１
#  0 1 2 3 4 5 6 7 8 9 a b c d e f 
#0:□□□□□□□□□□□□□□□□
#1:□□□□□□□■□□□□□□□□
#2:□□□□□□■■■□□□□□□□
#3:□□□□□□□■□□□□□□□□
#4:□□□□□□□■□□□□□□□□
#5:□□□□□□□■□□□□□□□□
#6:□□□□□□□■□□□□□□□□
#7:□□□□□□□■□□□□□□□□
#8:□□□□□□□■□□□□□□□□
#9:□□□□□□□■□□□□□□□□
#a:□□□□□□□□□□□□□□□□
o_dottbl15 = [0 for dot in range(0x18)]
o_dottbl15 = [
	0x07,0x01,0x06,0x02,0x07,0x02,0x08,0x02,0x07,0x03,0x07,0x04,0x07,0x05,0x07,0x06,
	0x07,0x07,0x07,0x08,0x07,0x09,0xff,0xff]


#（１６）インベーダー弾０２
#  0 1 2 3 4 5 6 7 8 9 a b c d e f 
#0:□□□□□□□□□□□□□□□□
#1:□□□□□□□□□□□□□□□□
#2:□□□□□□□□■□□□□□□□
#3:□□□□□□□■□□□□□□□□
#4:□□□□□□■□□□□□□□□□
#5:□□□□□□□■□□□□□□□□
#6:□□□□□□□□■□□□□□□□
#7:□□□□□□□■□□□□□□□□
#8:□□□□□□■□□□□□□□□□
#9:□□□□□□□□□□□□□□□□
#a:□□□□□□□□□□□□□□□□
#b:□□□□□□□□□□□□□□□□
o_dottbl16 = [0 for dot in range(0x10)]
o_dottbl16 = [
	0x08,0x02,0x07,0x03,0x06,0x04,0x07,0x05,0x08,0x06,0x07,0x07,0x06,0x08,0xff,0xff]

#（１７）インベーダー弾０２
#  0 1 2 3 4 5 6 7 8 9 a b c d e f 
#0:□□□□□□□□□□□□□□□□
#1:□□□□□□■□□□□□□□□□
#2:□□□□□□□■□□□□□□□□
#3:□□□□□□□□■□□□□□□□
#4:□□□□□□□■□□□□□□□□
#5:□□□□□□■□□□□□□□□□
#6:□□□□□□□■□□□□□□□□
#7:□□□□□□□□■□□□□□□□
#8:□□□□□□□■□□□□□□□□
#9:□□□□□□■□□□□□□□□□
#a:□□□□□□□□□□□□□□□□
o_dottbl17 = [0 for dot in range(0x14)]
o_dottbl17 = [
	0x06,0x01,0x07,0x02,0x08,0x03,0x07,0x04,0x06,0x05,0x07,0x06,0x08,0x07,0x07,0x08,
	0x06,0x09,0xff,0xff]


#（１８）インベーダー弾０２
#  0 1 2 3 4 5 6 7 8 9 a b c d e f 
#0:□□□□□□□□□□□□□□□□
#1:□□□□□□□□□□□□□□□□
#2:□□□□□□■□□□□□□□□□
#3:□□□□□□□■□□□□□□□□
#4:□□□□□□□□■□□□□□□□
#5:□□□□□□□■□□□□□□□□
#6:□□□□□□■□□□□□□□□□
#7:□□□□□□□■□□□□□□□□
#8:□□□□□□□□■□□□□□□□
#9:□□□□□□□□□□□□□□□□
#a:□□□□□□□□□□□□□□□□
o_dottbl18 = [0 for dot in range(0x10)]
o_dottbl18 = [
	0x06,0x02,0x07,0x03,0x08,0x04,0x07,0x05,0x06,0x06,0x07,0x07,0x08,0x08,0xff,0xff]

#（１９）インベーダー弾０２
#  0 1 2 3 4 5 6 7 8 9 a b c d e f 
#0:□□□□□□□□□□□□□□□□
#1:□□□□□□□□■□□□□□□□
#2:□□□□□□□■□□□□□□□□
#3:□□□□□□■□□□□□□□□□
#4:□□□□□□□■□□□□□□□□
#5:□□□□□□□□■□□□□□□□
#6:□□□□□□□■□□□□□□□□
#7:□□□□□□■□□□□□□□□□
#8:□□□□□□□■□□□□□□□□
#9:□□□□□□□□■□□□□□□□
#a:□□□□□□□□□□□□□□□□
o_dottbl19 = [0 for dot in range(0x00)]
o_dottbl19 = [
	0x08,0x01,0x07,0x02,0x06,0x03,0x07,0x04,0x08,0x05,0x07,0x06,0x06,0x07,0x07,0x08,
	0x08,0x09,0xff,0xff]

#（１Ａ）インベーダー弾０３
#  0 1 2 3 4 5 6 7 8 9 a b c d e f 
#0:□□□□□□□□□□□□□□□□
#1:□□□□□□□■□□□□□□□□
#2:□□□□□□□■□□□□□□□□
#3:□□□□□□□■□□□□□□□□
#4:□□□□□□□■□□□□□□□□
#5:□□□□□□□■□□□□□□□□
#6:□□□□□□□■□□□□□□□□
#7:□□□□□□□■□□□□□□□□
#8:□□□□□□□■□□□□□□□□
#9:□□□□□□□■□□□□□□□□
#a:□□□□□□□□□□□□□□□□
o_dottbl1a = [0 for dot in range(0x14)]
o_dottbl1a = [
	0x07,0x01,0x07,0x02,0x07,0x03,0x07,0x04,0x07,0x05,0x07,0x06,0x07,0x07,0x07,0x08,
	0x07,0x09,0xff,0xff]

#（１Ｂ）インベーダー弾０３
#  0 1 2 3 4 5 6 7 8 9 a b c d e f 
#0:□□□□□□□□□□□□□□□□
#1:□□□□□□□■■□□□□□□□
#2:□□□□□□□■□□□□□□□□
#3:□□□□□□■■□□□□□□□□
#4:□□□□□□□■□□□□□□□□
#5:□□□□□□□■■□□□□□□□
#6:□□□□□□□■□□□□□□□□
#7:□□□□□□■■□□□□□□□□
#8:□□□□□□□■□□□□□□□□
#9:□□□□□□□■■□□□□□□□
#a:□□□□□□□□□□□□□□□□
o_dottbl1b = [0 for dot in range(0x1e)]
o_dottbl1b = [
	0x07,0x01,0x08,0x01,0x07,0x02,0x06,0x03,0x07,0x03,0x07,0x04,0x07,0x05,0x08,0x05,
	0x07,0x06,0x06,0x07,0x07,0x07,0x07,0x08,0x07,0x09,0x08,0x09,0xff,0xff]

#（１Ｃ）インベーダー弾０３
#  0 1 2 3 4 5 6 7 8 9 a b c d e f 
#0:□□□□□□□□□□□□□□□□
#1:□□□□□□□■□□□□□□□□
#2:□□□□□□□■□□□□□□□□
#3:□□□□□□□■□□□□□□□□
#4:□□□□□□□■□□□□□□□□
#5:□□□□□□□■□□□□□□□□
#6:□□□□□□□■□□□□□□□□
#7:□□□□□□□■□□□□□□□□
#8:□□□□□□□■□□□□□□□□
#9:□□□□□□□■□□□□□□□□
#a:□□□□□□□□□□□□□□□□
o_dottbl1c = [0 for dot in range(0x14)]
o_dottbl1c = [
	0x07,0x01,0x07,0x02,0x07,0x03,0x07,0x04,0x07,0x05,0x07,0x06,0x07,0x07,0x07,0x08,
	0x07,0x09,0xff,0xff]

#（１Ｄ）インベーダー弾０３
#  0 1 2 3 4 5 6 7 8 9 a b c d e f 
#0:□□□□□□□□□□□□□□□□
#1:□□□□□□■■□□□□□□□□
#2:□□□□□□□■□□□□□□□□
#3:□□□□□□□■■□□□□□□□
#4:□□□□□□□■□□□□□□□□
#5:□□□□□□■■□□□□□□□□
#6:□□□□□□□■□□□□□□□□
#7:□□□□□□□■■□□□□□□□
#8:□□□□□□□■□□□□□□□□
#9:□□□□□□■■□□□□□□□□
#a:□□□□□□□□□□□□□□□□
o_dottbl1d = [0 for dot in range(0x1e)]
o_dottbl1d = [
	0x06,0x01,0x07,0x01,0x07,0x02,0x07,0x03,0x08,0x03,0x07,0x04,0x06,0x05,0x07,0x05,
	0x07,0x06,0x07,0x07,0x08,0x07,0x07,0x08,0x06,0x09,0x07,0x09,0xff,0xff]

#（１Ｅ）敵やられ
#  0 1 2 3 4 5 6 7 8 9 a b c d e
#0:□□□□□□□□□□□□□□□
#1:□□■□□■□□□■□□■□□
#2:□□□■□□■□■□□■□□□
#3:□□□□■□□□□□■□□□□
#4:□■■□□□□□□□□□■■□
#5:□□□□■□□□□□■□□□□
#6:□□□■□□■□■□□■□□□
#7:□□■□□■□□□■□□■□□
#8:□□□□□□□□□□□□□□□
o_dottbl1e = [0 for dot in range(0x32)]
o_dottbl1e = [
	0x02,0x01,0x05,0x01,0x09,0x01,0x0c,0x01,0x03,0x02,0x06,0x02,0x08,0x02,0x0b,0x02,
	0x04,0x03,0x0a,0x03,0x01,0x04,0x02,0x04,0x0c,0x04,0x0d,0x04,0x04,0x05,0x0a,0x05,
	0x03,0x06,0x06,0x06,0x08,0x06,0x0b,0x06,0x02,0x07,0x05,0x07,0x09,0x07,0x0c,0x07,
	0xff,0xff]

#（１Ｆ）
o_dottbl1f = [0 for dot in range(0x32)]
o_dottbl1f = [0xff,0xff]

#（２０）プレイヤーやられ１
#  0 1 2 3 4 5 6 7 8 9 a b c d e 
#0:□□□□□■□□□□□□■□□
#1:□□□□■□□■□□■□□□□
#2:□□■□□□□□■□□□■□□
#3:■□□□□■■□□■□□□□□
#4:□□■□□■■□■■□■□■□
#5:■□□■□■■■■■■■□□□
#6:□□■■■■■■■■■■■□□
#7:□■■■■■■■■■■■■■□
o_dottbl20 = [0 for dot in range(0x6a)]
o_dottbl20 = [
	0x05,0x00,0x0c,0x00,0x04,0x01,0x07,0x01,0x0a,0x01,0x02,0x02,0x08,0x02,0x0c,0x02,
	0x00,0x03,0x05,0x03,0x06,0x03,0x09,0x03,0x02,0x04,0x05,0x04,0x06,0x04,0x08,0x04,
	0x09,0x04,0x0b,0x04,0x0d,0x04,0x00,0x05,0x03,0x05,0x05,0x05,0x06,0x05,0x07,0x05,
	0x08,0x05,0x09,0x05,0x0a,0x05,0x0b,0x05,0x02,0x06,0x03,0x06,0x04,0x06,0x05,0x06,
	0x06,0x06,0x07,0x06,0x08,0x06,0x09,0x06,0x0a,0x06,0x0b,0x06,0x0c,0x06,0x01,0x07,
	0x02,0x07,0x03,0x07,0x04,0x07,0x05,0x07,0x06,0x07,0x07,0x07,0x08,0x07,0x09,0x07,
	0x0a,0x07,0x0b,0x07,0x0c,0x07,0x0d,0x07,0xff,0xff]
#（２１）プレイヤーやられ２
#  0 1 2 3 4 5 6 7 8 9 a b c d e 
#0:□□□■□□□■□□□■□□□
#1:□□■□□■□□□■□□□■□
#2:■□□□□□■□□□□□□□□
#3:□□■□□■■□□□□■□□■
#4:■□□□□■■■□■□□□□□
#5:□□□■□□■■■■□□■□■
#6:□□■■■■■■■■■■□□□
#7:□■■■□□■■■■■■■■□
o_dottbl21 = [0 for dot in range(0x60)]
o_dottbl21 = [
	0x03,0x00,0x07,0x00,0x0b,0x00,0x02,0x01,0x05,0x01,0x09,0x01,0x0d,0x01,0x00,0x02,
	0x06,0x02,0x02,0x03,0x05,0x03,0x06,0x03,0x0b,0x03,0x0e,0x03,0x00,0x04,0x05,0x04,
	0x06,0x04,0x07,0x04,0x09,0x04,0x03,0x05,0x06,0x05,0x07,0x05,0x08,0x05,0x09,0x05,
	0x0b,0x05,0x0e,0x05,0x02,0x06,0x03,0x06,0x04,0x06,0x05,0x06,0x06,0x06,0x07,0x06,
	0x08,0x06,0x09,0x06,0x0a,0x06,0x0b,0x06,0x01,0x07,0x02,0x07,0x03,0x07,0x06,0x07,
	0x07,0x07,0x08,0x07,0x09,0x07,0x0a,0x07,0x0b,0x07,0x0c,0x07,0x0d,0x07,0xff,0xff]
#---------------------------------------------------------------------------------------------------
# フォント
#（0x00）"□"
#  0 1 2 3 4 5 6 7 
#0:□□□□□□□□
#1:□□□□□□□□
#2:□□□□□□□□
#3:□□□□□□□□
#4:□□□□□□□□
#5:□□□□□□□□
#6:□□□□□□□□
#7:□□□□□□□□
o_dotfont_SPACE = [0 for dot in range(0x02)]
o_dotfont_SPACE = [0xff,0xff]
#（0x00）"■"
#  0 1 2 3 4 5 6 7 
#0:■■■■■■■■
#1:■■■■■■■■
#2:■■■■■■■■
#3:■■■■■■■■
#4:■■■■■■■■
#5:■■■■■■■■
#6:■■■■■■■■
#7:■■■■■■■■
o_dotfont_BETA = [0 for dot in range(0x80)]
o_dotfont_BETA = [
	0x00,0x00, 0x01,0x00, 0x02,0x00, 0x03,0x00, 0x04,0x00, 0x05,0x00, 0x06,0x00, 0x07,0x00,
	0x00,0x01, 0x01,0x01, 0x02,0x01, 0x03,0x01, 0x04,0x01, 0x05,0x01, 0x06,0x01, 0x07,0x01,
	0x00,0x02, 0x01,0x02, 0x02,0x02, 0x03,0x02, 0x04,0x02, 0x05,0x02, 0x06,0x02, 0x07,0x02,
	0x00,0x03, 0x01,0x03, 0x02,0x03, 0x03,0x03, 0x04,0x03, 0x05,0x03, 0x06,0x03, 0x07,0x03,
	0x00,0x04, 0x01,0x04, 0x02,0x04, 0x03,0x04, 0x04,0x04, 0x05,0x04, 0x06,0x04, 0x07,0x04,
	0x00,0x05, 0x01,0x05, 0x02,0x05, 0x03,0x05, 0x04,0x05, 0x05,0x05, 0x06,0x05, 0x07,0x05,
	0x00,0x06, 0x01,0x06, 0x02,0x06, 0x03,0x06, 0x04,0x06, 0x05,0x06, 0x06,0x06, 0x07,0x06,
	0xff,0xff]
#（0x00）"("
#  0 1 2 3 4 5 6 7 
#0:□□□□■□□□
#1:□□□■□□□□
#2:□□■□□□□□
#3:□□■□□□□□
#4:□□■□□□□□
#5:□□□■□□□□
#6:□□□□■□□□
#7:□□□□□□□□
o_dotfont_KAKKO1 = [0 for dot in range(0x0e)]
o_dotfont_KAKKO1 = [
	0x04,0x00, 
	0x03,0x01, 
	0x02,0x02, 
	0x02,0x03, 
	0x02,0x04, 
	0x03,0x05, 
	0x04,0x06, 
	0xff,0xff]
#（0x00）")"
#  0 1 2 3 4 5 6 7 
#0:□□■□□□□□
#1:□□□■□□□□
#2:□□□□■□□□
#3:□□□□■□□□
#4:□□□□■□□□
#5:□□□■□□□□
#6:□□■□□□□□
#7:□□□□□□□□
o_dotfont_KAKKO2 = [0 for dot in range(0x0e)]
o_dotfont_KAKKO2 = [
	0x02,0x00, 
	0x03,0x01, 
	0x04,0x02, 
	0x04,0x03, 
	0x04,0x04, 
	0x03,0x05, 
	0x02,0x06, 
	0xff,0xff]
#（0x00）","
#  0 1 2 3 4 5 6 7 
#0:□□□□□□□□
#1:□□□□□□□□
#2:□□□□□□□□
#3:□□□□□□□□
#4:□■■□□□□□
#5:□■■□□□□□
#6:□□■□□□□□
#7:□■□□□□□□
o_dotfont_CONNMA = [0 for dot in range(0x0e)]
o_dotfont_CONNMA = [
	0x01,0x04, 0x02,0x04, 
	0x01,0x05, 0x02,0x05, 
	0x02,0x06, 
	0x01,0x07, 
	0xff,0xff]
#（0x00）"-"
#  0 1 2 3 4 5 6 7 
#0:□□□□□□□□
#1:□□□□□□□□
#2:□□□□□□□□
#3:□■■■■■□□
#4:□□□□□□□□
#5:□□□□□□□□
#6:□□□□□□□□
#7:□□□□□□□□
o_dotfont_HAIHUN = [0 for dot in range(0x0a)]
o_dotfont_HAIHUN = [
	0x01,0x03, 0x02,0x03, 0x03,0x03, 0x04,0x03, 0x05,0x03, 
	0xff,0xff]
#（0x00）"."
#  0 1 2 3 4 5 6 7 
#0:□□□□□□□□
#1:□□□□□□□□
#2:□□□□□□□□
#3:□□□□□□□□
#4:□□□□□□□□
#5:□■■□□□□□
#6:□■■□□□□□
#7:□□□□□□□□
o_dotfont_PERIOD = [0 for dot in range(0x0a)]
o_dotfont_PERIOD = [
	0x01,0x05, 0x02,0x05, 
	0x01,0x06, 0x02,0x06, 
	0xff,0xff]
#（0x00）"/"
#  0 1 2 3 4 5 6 7 
#0:□□□□□■□□
#1:□□□□□■□□
#2:□□□□■□□□
#3:□□□■□□□□
#4:□□■□□□□□
#5:□■□□□□□□
#6:□■□□□□□□
#7:□□□□□□□□
o_dotfont_SHASEN = [0 for dot in range(0x10)]
o_dotfont_SHASEN = [
	0x05,0x00, 
	0x05,0x01, 
	0x04,0x02, 
	0x03,0x03, 
	0x02,0x04, 
	0x01,0x05, 
	0x01,0x06, 
	0xff,0xff]

#（0x00）"0"
#  0 1 2 3 4 5 6 7 
#0:□□■■■□□□
#1:□■□□□■□□
#2:□■□□■■□□
#3:□■□■□■□□
#4:□■■□□■□□
#5:□■□□□■□□
#6:□□■■■□□□
#7:□□□□□□□□
o_dotfont_0 = [0 for dot in range(0x80)]
o_dotfont_0 = [
	0x02,0x00, 0x03,0x00, 0x04,0x00,  
	0x01,0x01, 0x05,0x01, 
	0x01,0x02, 0x04,0x02, 0x05,0x02, 
	0x01,0x03, 0x03,0x03, 0x05,0x03, 
	0x01,0x04, 0x02,0x04, 0x05,0x04, 
	0x01,0x05, 0x05,0x05, 
	0x02,0x06, 0x03,0x06, 0x04,0x06, 
	0xff,0xff]
#（0x01）"1"
#  0 1 2 3 4 5 6 7 
#0:□□□■□□□□
#1:□□■■□□□□
#2:□□□■□□□□
#3:□□□■□□□□
#4:□□□■□□□□
#5:□□□■□□□□
#6:□□■■■□□□
#7:□□□□□□□□
o_dotfont_1 = [0 for dot in range(0x80)]
o_dotfont_1 = [
	0x03,0x00, 
	0x02,0x01, 0x03,0x01,  
	0x03,0x02, 
	0x03,0x03, 
	0x03,0x04, 
	0x03,0x05, 
	0x02,0x06, 0x03,0x06, 0x04,0x06, 
	0xff,0xff]
#（0x02）"2"
#  0 1 2 3 4 5 6 7 
#0:□□■■■□□□
#1:□■□□□■□□
#2:□□□□□■□□
#3:□□□□■□□□
#4:□□□■□□□□
#5:□□■□□□□□
#6:□■■■■■□□
#7:□□□□□□□□
o_dotfont_2 = [0 for dot in range(0x80)]
o_dotfont_2 = [
	0x02,0x00, 0x03,0x00, 0x04,0x00, 
	0x01,0x01, 0x05,0x01, 
	0x05,0x02, 
	0x04,0x03, 
	0x03,0x04, 
	0x02,0x05, 
	0x01,0x06, 0x02,0x06, 0x03,0x06, 0x04,0x06, 0x05,0x06, 
	0xff,0xff]
#（0x00）"3"
#  0 1 2 3 4 5 6 7 
#0:□■■■■■□□
#1:□□□□■□□□
#2:□□□■□□□□
#3:□□□□■□□□
#4:□□□□□■□□
#5:□■□□□■□□
#6:□□■■■□□□
#7:□□□□□□□□
o_dotfont_3 = [0 for dot in range(0x80)]
o_dotfont_3 = [
	0x01,0x00, 0x02,0x00, 0x03,0x00, 0x04,0x00, 0x05,0x00, 
	0x04,0x01, 
	0x03,0x02, 
	0x04,0x03, 
	0x05,0x04, 
	0x01,0x05, 0x05,0x05, 
	0x02,0x06, 0x03,0x06, 0x04,0x06, 
	0xff,0xff]
#（0x04）"4"
#  0 1 2 3 4 5 6 7 
#0:□□□□■□□□
#1:□□□■■□□□
#2:□□■□■□□□
#3:□■□□■□□□
#4:□■■■■■□□
#5:□□□□■□□□
#6:□□□□■□□□
#7:□□□□□□□□
o_dotfont_4 = [0 for dot in range(0x80)]
o_dotfont_4 = [
	0x04,0x00, 
	0x03,0x01, 0x04,0x01, 
	0x02,0x02, 0x04,0x02, 
	0x01,0x03, 0x04,0x03, 
	0x01,0x04, 0x02,0x04, 0x03,0x04, 0x04,0x04, 0x05,0x04, 
	0x04,0x05, 
	0x04,0x06, 
	0xff,0xff]
#（0x05）"5"
#  0 1 2 3 4 5 6 7 
#0:□■■■■■□□
#1:□■□□□□□□
#2:□■■■■□□□
#3:□□□□□■□□
#4:□□□□□■□□
#5:□■□□□■□□
#6:□□■■■□□□
#7:□□□□□□□□
o_dotfont_5 = [0 for dot in range(0x80)]
o_dotfont_5 = [
	0x01,0x00, 0x02,0x00, 0x03,0x00, 0x04,0x00, 0x05,0x00, 
	0x01,0x01, 
	0x01,0x02, 0x02,0x02, 0x03,0x02, 0x04,0x02, 
	0x05,0x03, 
	0x05,0x04, 
	0x01,0x05, 0x05,0x05, 
	0x02,0x06, 0x03,0x06, 0x04,0x06, 
	0xff,0xff]
#（0x06）"6"
#  0 1 2 3 4 5 6 7 
#0:□□□■■□□□
#1:□□■□□□□□
#2:□■□□□□□□
#3:□■■■■□□□
#4:□■□□□■□□
#5:□■□□□■□□
#6:□□■■■□□□
#7:□□□□□□□□
o_dotfont_6 = [0 for dot in range(0x80)]
o_dotfont_6 = [
	0x03,0x00, 0x04,0x00, 
	0x02,0x01, 
	0x01,0x02, 
	0x01,0x03, 0x02,0x03, 0x03,0x03, 0x04,0x03, 
	0x01,0x04, 0x05,0x04, 
	0x01,0x05, 0x05,0x05, 
	0x02,0x06, 0x03,0x06, 0x04,0x06, 
	0xff,0xff]
#（0x07）"7"
#  0 1 2 3 4 5 6 7 
#0:□■■■■■□□
#1:□□□□□■□□
#2:□□□□■□□□
#3:□□□■□□□□
#4:□□■□□□□□
#5:□□■□□□□□
#6:□□■□□□□□
#7:□□□□□□□□
o_dotfont_7 = [0 for dot in range(0x80)]
o_dotfont_7 = [
	0x01,0x00, 0x02,0x00, 0x03,0x00, 0x04,0x00, 0x05,0x00, 
	0x05,0x01, 
	0x04,0x02, 
	0x03,0x03, 
	0x02,0x04, 
	0x02,0x05, 
	0x02,0x06, 
	0xff,0xff]
#（0x08）"8"
#  0 1 2 3 4 5 6 7 
#0:□□■■■□□□
#1:□■□□□■□□
#2:□■□□□■□□
#3:□□■■■□□□
#4:□■□□□■□□
#5:□■□□□■□□
#6:□□■■■□□□
#7:□□□□□□□□
o_dotfont_8 = [0 for dot in range(0x80)]
o_dotfont_8 = [
	0x02,0x00, 0x03,0x00, 0x04,0x00, 
	0x01,0x01, 0x05,0x01,
	0x01,0x02, 0x05,0x02,
	0x02,0x03, 0x03,0x03, 0x04,0x03, 
	0x01,0x04, 0x05,0x04,
	0x01,0x05, 0x05,0x05,
	0x02,0x06, 0x03,0x06, 0x04,0x06, 
	0xff,0xff]
#（0x09）"9"
#  0 1 2 3 4 5 6 7 
#0:□□■■■□□□
#1:□■□□□■□□
#2:□■□□□■□□
#3:□□■■■■□□
#4:□□□□□■□□
#5:□□□□■□□□
#6:□□■■□□□□
#7:□□□□□□□□
o_dotfont_9 = [0 for dot in range(0x80)]
o_dotfont_9 = [
	0x02,0x00, 0x03,0x00, 0x04,0x00, 
	0x01,0x01, 0x05,0x01, 
	0x01,0x02, 0x05,0x02, 
	0x02,0x03, 0x03,0x03, 0x04,0x03, 0x05,0x03, 
	0x05,0x04, 
	0x04,0x05, 
	0x02,0x06, 0x03,0x06, 
	0xff,0xff]

#（0x00）"A"
#  0 1 2 3 4 5 6 7 
#0:□□■■■□□□
#1:□■□□□■□□
#2:□■□□□■□□
#3:□■■■■■□□
#4:□■□□□■□□
#5:□■□□□■□□
#6:□■□□□■□□
#7:□□□□□□□□
o_dotfont_A = [0 for dot in range(0x80)]
o_dotfont_A = [
	0x02,0x00, 0x03,0x00, 0x04,0x00, 
	0x01,0x01, 0x05,0x01, 
	0x01,0x02, 0x05,0x02, 
	0x01,0x03, 0x02,0x03, 0x03,0x03, 0x04,0x03, 0x05,0x03, 
	0x01,0x04, 0x05,0x04, 
	0x01,0x05, 0x05,0x05, 
	0x01,0x06, 0x05,0x06, 
	0xff,0xff]
#（0x00）"B"
#  0 1 2 3 4 5 6 7 
#0:□■■■■□□□
#1:□■□□□■□□
#2:□■□□□■□□
#3:□■■■■□□□
#4:□■□□□■□□
#5:□■□□□■□□
#6:□■■■■□□□
#7:□□□□□□□□
o_dotfont_B = [0 for dot in range(0x80)]
o_dotfont_B = [
	0x01,0x00, 0x02,0x00, 0x03,0x00, 0x04,0x00, 
	0x01,0x01, 0x05,0x01, 
	0x01,0x02, 0x05,0x02, 
	0x01,0x03, 0x02,0x03, 0x03,0x03, 0x04,0x03, 
	0x01,0x04, 0x05,0x04, 
	0x01,0x05, 0x05,0x05, 
	0x01,0x06, 0x02,0x06, 0x03,0x06, 0x04,0x06, 
	0xff,0xff]
#（0x00）"C"
#  0 1 2 3 4 5 6 7 
#0:□□■■■□□□
#1:□■□□□■□□
#2:□■□□□□□□
#3:□■□□□□□□
#4:□■□□□□□□
#5:□■□□□■□□
#6:□□■■■□□□
#7:□□□□□□□□
o_dotfont_C = [0 for dot in range(0x80)]
o_dotfont_C = [
	0x02,0x00, 0x03,0x00, 0x04,0x00, 
	0x01,0x01, 0x05,0x01, 
	0x01,0x02, 
	0x01,0x03, 
	0x01,0x04, 
	0x01,0x05, 0x05,0x05, 
	0x02,0x06, 0x03,0x06, 0x04,0x06, 
	0xff,0xff]
#（0x00）"D"
#  0 1 2 3 4 5 6 7 
#0:□■■■■□□□
#1:□■□□□■□□
#2:□■□□□■□□
#3:□■□□□■□□
#4:□■□□□■□□
#5:□■□□□■□□
#6:□■■■■□□□
#7:□□□□□□□□
o_dotfont_D = [0 for dot in range(0x80)]
o_dotfont_D = [
	0x01,0x00, 0x02,0x00, 0x03,0x00, 0x04,0x00, 
	0x01,0x01, 0x05,0x01, 
	0x01,0x02, 0x05,0x02, 
	0x01,0x03, 0x05,0x03, 
	0x01,0x04, 0x05,0x04, 
	0x01,0x05, 0x05,0x05, 
	0x01,0x06, 0x02,0x06, 0x03,0x06, 0x04,0x06, 
	0xff,0xff]
#（0x00）"E"
#  0 1 2 3 4 5 6 7 
#0:□■■■■■□□
#1:□■□□□□□□
#2:□■□□□□□□
#3:□■■■■□□□
#4:□■□□□□□□
#5:□■□□□□□□
#6:□■■■■■□□
#7:□□□□□□□□
o_dotfont_E = [0 for dot in range(0x80)]
o_dotfont_E = [
	0x01,0x00, 0x02,0x00, 0x03,0x00, 0x04,0x00, 0x05,0x00, 
	0x01,0x01, 
	0x01,0x02, 
	0x01,0x03, 0x02,0x03, 0x03,0x03, 0x04,0x03, 
	0x01,0x04, 
	0x01,0x05, 
	0x01,0x06, 0x02,0x06, 0x03,0x06, 0x04,0x06, 0x05,0x06, 
	0xff,0xff]
#（0x00）"F"
#  0 1 2 3 4 5 6 7 
#0:□■■■■■□□
#1:□■□□□□□□
#2:□■□□□□□□
#3:□■■■■□□□
#4:□■□□□□□□
#5:□■□□□□□□
#6:□■□□□□□□
#7:□□□□□□□□
o_dotfont_F = [0 for dot in range(0x80)]
o_dotfont_F = [
	0x01,0x00, 0x02,0x00, 0x03,0x00, 0x04,0x00, 0x05,0x00, 
	0x01,0x01, 
	0x01,0x02, 
	0x01,0x03, 0x02,0x03, 0x03,0x03, 0x04,0x03, 
	0x01,0x04, 
	0x01,0x05, 
	0x01,0x06, 
	0xff,0xff]
#（0x00）"G"
#  0 1 2 3 4 5 6 7 
#0:□□■■■□□□
#1:□■□□□■□□
#2:□■□□□□□□
#3:□■□□□□□□
#4:□■□□■■□□
#5:□■□□□■□□
#6:□□■■■□□□
#7:□□□□□□□□
o_dotfont_G = [0 for dot in range(0x80)]
o_dotfont_G = [
	0x02,0x00, 0x03,0x00, 0x04,0x00, 
	0x01,0x01, 0x05,0x01, 
	0x01,0x02, 
	0x01,0x03, 
	0x01,0x04, 0x04,0x04, 0x05,0x04, 
	0x01,0x05, 0x05,0x05, 
	0x02,0x06, 0x03,0x06, 0x04,0x06, 
	0xff,0xff]
#（0x00）"H"
#  0 1 2 3 4 5 6 7 
#0:□■□□□■□□
#1:□■□□□■□□
#2:□■□□□■□□
#3:□■■■■■□□
#4:□■□□□■□□
#5:□■□□□■□□
#6:□■□□□■□□
#7:□□□□□□□□
o_dotfont_H = [0 for dot in range(0x80)]
o_dotfont_H = [
	0x01,0x00, 0x05,0x00, 
	0x01,0x01, 0x05,0x01, 
	0x01,0x02, 0x05,0x02, 
	0x01,0x03, 0x02,0x03, 0x03,0x03, 0x04,0x03, 0x05,0x03, 
	0x01,0x04, 0x05,0x04, 
	0x01,0x05, 0x05,0x05, 
	0x01,0x06, 0x05,0x06, 
	0xff,0xff]
#（0x00）"I"
#  0 1 2 3 4 5 6 7 
#0:□□■■■□□□
#1:□□□■□□□□
#2:□□□■□□□□
#3:□□□■□□□□
#4:□□□■□□□□
#5:□□□■□□□□
#6:□□■■■□□□
#7:□□□□□□□□
o_dotfont_I = [0 for dot in range(0x80)]
o_dotfont_I = [
	0x02,0x00, 0x03,0x00, 0x04,0x00, 
	0x03,0x01, 
	0x03,0x02, 
	0x03,0x03, 
	0x03,0x04, 
	0x03,0x05, 
	0x02,0x06, 0x03,0x06, 0x04,0x06, 
	0xff,0xff]
#（0x00）"J"
#  0 1 2 3 4 5 6 7 
#0:□□□■■■□□
#1:□□□□■□□□
#2:□□□□■□□□
#3:□□□□■□□□
#4:□□□□■□□□
#5:□■□□■□□□
#6:□□■■□□□□
#7:□□□□□□□□
o_dotfont_J = [0 for dot in range(0x80)]
o_dotfont_J = [
	0x03,0x00, 0x04,0x00, 0x05,0x00, 
	0x04,0x01, 0x05,0x01, 
	0x04,0x02, 
	0x04,0x03, 
	0x04,0x04, 
	0x01,0x05, 0x04,0x05, 
	0x02,0x06, 0x03,0x06, 
	0xff,0xff]
#（0x00）"K"
#  0 1 2 3 4 5 6 7 
#0:□■□□□■□□
#1:□■□□■□□□
#2:□■□■□□□□
#3:□■■□□□□□
#4:□■□■□□□□
#5:□■□□■□□□
#6:□■□□□■□□
#7:□□□□□□□□
o_dotfont_K = [0 for dot in range(0x80)]
o_dotfont_K = [
	0x01,0x00, 0x05,0x00, 
	0x01,0x01, 0x04,0x01, 
	0x01,0x02, 0x03,0x02, 
	0x01,0x03, 0x02,0x03, 
	0x01,0x04, 0x03,0x04, 
	0x01,0x05, 0x04,0x05, 
	0x01,0x06, 0x05,0x06, 
	0xff,0xff]
#（0x00）"L"
#  0 1 2 3 4 5 6 7 
#0:□■□□□□□□
#1:□■□□□□□□
#2:□■□□□□□□
#3:□■□□□□□□
#4:□■□□□□□□
#5:□■□□□□□□
#6:□■■■■■□□
#7:□□□□□□□□
o_dotfont_L = [0 for dot in range(0x80)]
o_dotfont_L = [
	0x01,0x00, 
	0x01,0x01, 
	0x01,0x02, 
	0x01,0x03, 
	0x01,0x04, 
	0x01,0x05, 
	0x01,0x06, 0x02,0x06, 0x03,0x06, 0x04,0x06, 0x05,0x06, 
	0xff,0xff]
#（0x00）"M"
#  0 1 2 3 4 5 6 7 
#0:□■□□□■□□
#1:□■■□■■□□
#2:□■□■□■□□
#3:□■□■□■□□
#4:□■□□□■□□
#5:□■□□□■□□
#6:□■□□□■□□
#7:□□□□□□□□
o_dotfont_M = [0 for dot in range(0x80)]
o_dotfont_M = [
	0x01,0x00, 0x05,0x00, 
	0x01,0x01, 0x02,0x01, 0x04,0x01, 0x05,0x01, 
	0x01,0x02, 0x03,0x02, 0x05,0x02, 
	0x01,0x03, 0x03,0x03, 0x05,0x03, 
	0x01,0x04, 0x05,0x04, 
	0x01,0x05, 0x05,0x05, 
	0x01,0x06, 0x05,0x06, 
	0xff,0xff]
#（0x00）"N"
#  0 1 2 3 4 5 6 7 
#0:□■□□□■□□
#1:□■□□□■□□
#2:□■■□□■□□
#3:□■□■□■□□
#4:□■□□■■□□
#5:□■□□□■□□
#6:□■□□□■□□
#7:□□□□□□□□
o_dotfont_N = [0 for dot in range(0x80)]
o_dotfont_N = [
	0x01,0x00, 0x05,0x00, 
	0x01,0x01, 0x05,0x01, 
	0x01,0x02, 0x02,0x02, 0x05,0x02, 
	0x01,0x03, 0x03,0x03, 0x05,0x03, 
	0x01,0x04, 0x04,0x04, 0x05,0x04, 
	0x01,0x05, 0x05,0x05, 
	0x01,0x06, 0x05,0x06, 
	0xff,0xff]
#（0x00）"O"
#  0 1 2 3 4 5 6 7 
#0:□□■■■□□□
#1:□■□□□■□□
#2:□■□□□■□□
#3:□■□□□■□□
#4:□■□□□■□□
#5:□■□□□■□□
#6:□□■■■□□□
#7:□□□□□□□□
o_dotfont_O = [0 for dot in range(0x80)]
o_dotfont_O = [
	0x02,0x00, 0x03,0x00, 0x04,0x00, 
	0x01,0x01, 0x05,0x01, 
	0x01,0x02, 0x05,0x02, 
	0x01,0x03, 0x05,0x03, 
	0x01,0x04, 0x05,0x04, 
	0x01,0x05, 0x05,0x05, 
	0x02,0x06, 0x03,0x06, 0x04,0x06, 
	0xff,0xff]
#（0x00）"P"
#  0 1 2 3 4 5 6 7 
#0:□■■■■□□□
#1:□■□□□■□□
#2:□■□□□■□□
#3:□■■■■□□□
#4:□■□□□□□□
#5:□■□□□□□□
#6:□■□□□□□□
#7:□□□□□□□□
o_dotfont_P = [0 for dot in range(0x80)]
o_dotfont_P = [
	0x01,0x00, 0x02,0x00, 0x03,0x00, 0x04,0x00, 
	0x01,0x01, 0x05,0x01, 
	0x01,0x02, 0x05,0x02, 
	0x01,0x03, 0x02,0x03, 0x03,0x03, 0x04,0x03, 
	0x01,0x04, 
	0x01,0x05, 
	0x01,0x06, 
	0xff,0xff]
#（0x00）"Q"
#  0 1 2 3 4 5 6 7 
#0:□□■■■□□□
#1:□■□□□■□□
#2:□■□□□■□□
#3:□■□□□■□□
#4:□■□■□■□□
#5:□■□□■□□□
#6:□□■■□■□□
#7:□□□□□□□□
o_dotfont_Q = [0 for dot in range(0x80)]
o_dotfont_Q = [
	0x02,0x00, 0x03,0x00, 0x04,0x00, 
	0x01,0x01, 0x05,0x01, 
	0x01,0x02, 0x05,0x02, 
	0x01,0x03, 0x05,0x03, 
	0x01,0x04, 0x03,0x04, 0x05,0x04, 
	0x01,0x05, 0x04,0x05, 
	0x02,0x06, 0x03,0x06, 0x05,0x06, 
	0xff,0xff]
#（0x00）"R"
#  0 1 2 3 4 5 6 7 
#0:□■■■■□□□
#1:□■□□□■□□
#2:□■□□□■□□
#3:□■■■■□□□
#4:□■□■□□□□
#5:□■□□■□□□
#6:□■□□□■□□
#7:□□□□□□□□
o_dotfont_R = [0 for dot in range(0x80)]
o_dotfont_R = [
	0x01,0x00, 0x02,0x00, 0x03,0x00, 0x04,0x00, 
	0x01,0x01, 0x05,0x01, 
	0x01,0x02, 0x05,0x02, 
	0x01,0x03, 0x02,0x03, 0x03,0x03, 0x04,0x03, 
	0x01,0x04, 0x03,0x04, 
	0x01,0x05, 0x04,0x05, 
	0x01,0x06, 0x05,0x06, 
	0xff,0xff]
#（0x00）"S"
#  0 1 2 3 4 5 6 7 
#0:□□■■■■□□
#1:□■□□□□□□
#2:□■□□□□□□
#3:□□■■■□□□
#4:□□□□□■□□
#5:□□□□□■□□
#6:□■■■■□□□
#7:□□□□□□□□
o_dotfont_S = [0 for dot in range(0x80)]
o_dotfont_S = [
	0x02,0x00, 0x03,0x00, 0x04,0x00, 0x05,0x00, 
	0x01,0x01, 
	0x01,0x02, 
	0x02,0x03, 0x03,0x03, 0x04,0x03, 
	0x05,0x04, 
	0x05,0x05, 
	0x01,0x06, 0x02,0x06, 0x03,0x06, 0x04,0x06, 
	0xff,0xff]
#（0x00）"T"
#  0 1 2 3 4 5 6 7 
#0:□■■■■■□□
#1:□□□■□□□□
#2:□□□■□□□□
#3:□□□■□□□□
#4:□□□■□□□□
#5:□□□■□□□□
#6:□□□■□□□□
#7:□□□□□□□□
o_dotfont_T = [0 for dot in range(0x80)]
o_dotfont_T = [
	0x01,0x00, 0x02,0x00, 0x03,0x00, 0x04,0x00, 0x05,0x00, 
	0x03,0x01, 
	0x03,0x02, 
	0x03,0x03, 
	0x03,0x04, 
	0x03,0x05, 
	0x03,0x06, 
	0xff,0xff]
#（0x00）"U"
#  0 1 2 3 4 5 6 7 
#0:□■□□□■□□
#1:□■□□□■□□
#2:□■□□□■□□
#3:□■□□□■□□
#4:□■□□□■□□
#5:□■□□□■□□
#6:□□■■■□□□
#7:□□□□□□□□
o_dotfont_U = [0 for dot in range(0x80)]
o_dotfont_U = [
	0x01,0x00, 0x05,0x00, 
	0x01,0x01, 0x05,0x01, 
	0x01,0x02, 0x05,0x02, 
	0x01,0x03, 0x05,0x03, 
	0x01,0x04, 0x05,0x04, 
	0x01,0x05, 0x05,0x05, 
	0x02,0x06, 0x03,0x06, 0x04,0x06, 
	0xff,0xff]
#（0x00）"V"
#  0 1 2 3 4 5 6 7 
#0:□■□□□■□□
#1:□■□□□■□□
#2:□■□□□■□□
#3:□■□□□■□□
#4:□□■□■□□□
#5:□□■□■□□□
#6:□□□■□□□□
#7:□□□□□□□□
o_dotfont_V = [0 for dot in range(0x80)]
o_dotfont_V = [
	0x01,0x00, 0x05,0x00, 
	0x01,0x01, 0x05,0x01, 
	0x01,0x02, 0x05,0x02, 
	0x01,0x03, 0x05,0x03, 
	0x02,0x04, 0x04,0x04,
	0x02,0x05, 0x04,0x05,
	0x03,0x06, 
	0xff,0xff]
#（0x00）"W"
#  0 1 2 3 4 5 6 7 
#0:□■□□□■□□
#1:□■□□□■□□
#2:□■□□□■□□
#3:□■□■□■□□
#4:□■□■□■□□
#5:□■□■□■□□
#6:□□■□■□□□
#7:□□□□□□□□
o_dotfont_W = [0 for dot in range(0x80)]
o_dotfont_W = [
	0x01,0x00, 0x05,0x00, 
	0x01,0x01, 0x05,0x01, 
	0x01,0x02, 0x05,0x02, 
	0x01,0x03, 0x03,0x03, 0x05,0x03, 
	0x01,0x04, 0x03,0x04, 0x05,0x04, 
	0x01,0x05, 0x03,0x05, 0x05,0x05, 
	0x02,0x06, 0x04,0x06, 
	0xff,0xff]
#（0x00）"X"
#  0 1 2 3 4 5 6 7 
#0:□■□□□■□□
#1:□■□□□■□□
#2:□□■□■□□□
#3:□□□■□□□□
#4:□□■□■□□□
#5:□■□□□■□□
#6:□■□□□■□□
#7:□□□□□□□□
o_dotfont_X = [0 for dot in range(0x80)]
o_dotfont_X = [
	0x01,0x00, 0x05,0x00, 
	0x01,0x01, 0x05,0x01, 
	0x02,0x02, 0x04,0x02, 
	0x03,0x03, 
	0x02,0x04, 0x04,0x04, 
	0x01,0x05, 0x05,0x05, 
	0x01,0x06, 0x05,0x06, 
	0xff,0xff]
#（0x00）"Y"
#  0 1 2 3 4 5 6 7 
#0:□■□□□■□□
#1:□■□□□■□□
#2:□□■□■□□□
#3:□□□■□□□□
#4:□□□■□□□□
#5:□□□■□□□□
#6:□□□■□□□□
#7:□□□□□□□□
o_dotfont_Y = [0 for dot in range(0x80)]
o_dotfont_Y = [
	0x01,0x00, 0x05,0x00, 
	0x01,0x01, 0x05,0x01, 
	0x02,0x02, 0x04,0x02, 
	0x03,0x03, 
	0x03,0x04, 
	0x03,0x05, 
	0x03,0x06, 
	0xff,0xff]
#（0x00）"Z"
#  0 1 2 3 4 5 6 7 
#0:□■■■■■□□
#1:□□□□□■□□
#2:□□□□■□□□
#3:□□□■□□□□
#4:□□■□□□□□
#5:□■□□□□□□
#6:□■■■■■□□
#7:□□□□□□□□
o_dotfont_Z = [0 for dot in range(0x80)]
o_dotfont_Z = [
	0x01,0x00, 0x02,0x00, 0x03,0x00, 0x04,0x00, 0x05,0x00, 
	0x05,0x01, 
	0x04,0x02, 
	0x03,0x03, 
	0x02,0x04, 
	0x01,0x05, 
	0x01,0x06, 0x02,0x06, 0x03,0x06, 0x04,0x06, 0x05,0x06, 
	0xff,0xff]

#  0 1 2 3 4 5 6 7 
#0:■■□□□□□□
#1:■□■□□□□□
#2:■■□□■■□□
#3:■□■□■□■□
#4:■□■□■□■□
#5:□□□□■□■□
#6:□□□□■■□□
#7:□□□□□□□□
o_dotfont_RD = [0 for dot in range(0x2a)]
o_dotfont_RD = [
	0x00,0x00,0x01,0x00,0x00,0x01,0x02,0x01,0x00,0x02,0x01,0x02,0x04,0x02,0x05,0x02,
	0x00,0x03,0x02,0x03,0x04,0x03,0x06,0x03,0x00,0x04,0x02,0x04,0x04,0x04,0x06,0x04,
	0x04,0x05,0x06,0x05,0x04,0x06,0x05,0x06,0xff,0xff]
#  0 1 2 3 4 5 6 7 
#0:■■■□□□□□
#1:■□□□□□□□
#2:■■□□■■□□
#3:■□□□■□■□
#4:■■■□■□■□
#5:□□□□■□■□
#6:□□□□■■□□
#7:□□□□□□□□
o_dotfont_ED = [0 for dot in range(0x26)]
o_dotfont_ED = [
	0x00,0x00,0x01,0x00,0x02,0x00,0x00,0x01,0x00,0x02,0x01,0x02,0x00,0x03,0x04,0x03,
	0x06,0x03,0x00,0x04,0x01,0x04,0x02,0x04,0x04,0x04,0x06,0x04,0x04,0x05,0x06,0x05,
	0x04,0x06,0x05,0x06,0xff,0xff]


#---------------------------------------------------------------------------------------------------

entry_table = [0 for dot in range(0x2b)]
entry_table = [
	#0   1   2   3   4   5   6   7   8   9   a   b   c   d   e   f
	'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P',
	'Q','R','S','T','U','V','W','X','Y','Z','.','-','/',' ','0','1',
	'2','3','4','5','6','7','8','9','>','<',' ']

invader_init_hight = [0 for dot in range(10)]
invader_init_hight = [0x70,0x80,0x90,0xa0,0x80,0x90,0xa0,0x90,0xa0,0xb0]

#---------------------------------------------------------------------------------------------------
DisplayMode = 5
DisplayTable = [[0 for i in range(8)] for j in range(6)]
DisplayTable[0] = [1024, 1024, 4, 0, 12, 4, 0x20,  0x80]
DisplayTable[1] = [1024, 1024, 3, 1, 12, 4, 0x20,  0x80]
DisplayTable[2] = [1024, 1024, 2, 2, 12, 4, 0x20,  0x80]
DisplayTable[3] = [ 512,  512, 2, 0, 6, 2,  0x50, 0x100]
DisplayTable[4] = [ 512,  512, 1, 1, 6, 2,  0x50, 0x100]
DisplayTable[5] = [ 256,  256, 1, 0, 6, 2,  0x20,  0x28]

# 定数
SCREEN_WIDTH	= DisplayTable[DisplayMode][0]
SCREEN_HEIGHT	= DisplayTable[DisplayMode][1]

#ゲーム用
RADIUS			= DisplayTable[DisplayMode][2]	#一辺の長さ
DDOT			= DisplayTable[DisplayMode][3]	#隙間
XSIZE = int( SCREEN_WIDTH / (RADIUS+DDOT) )
YSIZE = int( SCREEN_HEIGHT / (RADIUS+DDOT) )
#タイトル用
RADIUS2			= DisplayTable[DisplayMode][4]	#一辺の長さ
DDOT2			= DisplayTable[DisplayMode][5]	#隙間
XSIZE2 = int( SCREEN_WIDTH / (RADIUS2+DDOT2) )
YSIZE2 = int( SCREEN_HEIGHT / (RADIUS2+DDOT2) )
title_xoff		= DisplayTable[DisplayMode][6]	#タイトル表示位置X
title_yoff		= DisplayTable[DisplayMode][7]	#タイトル表示位置Y
TT_KANKAKU		= 4								#タイトル縦文字間隔

#---------------------------------------------------------------------------------------------------
#ランキングワーク
RANK_POS_RANK		= 0x04
RANK_POS_POINT_OFS	= 0x3c
RANK_POS_STAGE_OFS	= 0x5c
RANK_POS_NAME_OFS	= 0x94

NAME_MOJI_MAX		= 10

RANK_SCORE_WORK = [0 for i in range(10)]
RANK_STAGE_WORK = [0 for i in range(10)]	
RANK_NAME_WORK = [[0 for i in range(10)] for j in range(NAME_MOJI_MAX)]

COLR = 0
COLG = 1
COLB = 2

#敵数
INV_WIDTH_MAX = 11
INV_HIGHT_MAX = 5
INV_MAX = INV_WIDTH_MAX * INV_HIGHT_MAX

spr_yoff = 0x40		# sprite ypos offset
spr_xoff = 0x20		# sprite xpos offset


#境界
LIM_LEFT	= 0x20
LIM_RIGHT	= 0xe0
LIM_DOWN	= 0xd8
LIM_E_RIGHT	= 0xe0	# invader move right limit 0xe8-0x10
LIM_E_LEFT	= 0x18	# invader move left  limit 
LIM_E_DOWN	= 0xc8	# invader capture position 
LIM_P_RIGHT	= 0xd4	# player move right limit 0xe0-0x10 
LIM_P_LEFT	= 0x20	# player move left  limit 
LIM_PT_UP	= 0x20	# player tama up limit 
LIM_ET_DOWN	= 0xc6	# invader tama down position 
LIM_U_RIGHT	= 0xd0	# UFO right limit 
LIM_U_LEFT	= 0x10	# UFO left limit 

#スプライトワーク
O_SPR_WORK_MAX = 0x42
cond  		= 0
idpat 		= 1
ypos  		= 2
xpos  		= 3
mcnt  		= 4
WORKPARAM 	= 5

#O_SPR_WORK W_COND
F_LIVE   	= 0x80	# bit7 live flag
F_ACTIVE 	= 0x40	# bit6 active flag (enemy only)
F_TAMA   	= 0x04	# bit2 etama set
F_UDEG   	= 0x04	# bit2 ufo appear pos 0/1=right/left
F_HIT2   	= 0x02	# bit1 ptama, etama, ufo hit flag 砦
F_HIT    	= 0x01	# bit0 hit flag

#O_SPR_WORK base offset
spw_player 	= 0
spw_ptama  	= 1
spw_ufo    	= 2
spw_enemy  	= 3
spw_etama  	= 0x3a
spw_toride 	= 0x3d

O_SPR_WORK = [[0 for i in range(WORKPARAM)] for j in range(O_SPR_WORK_MAX)]

#共通ワーク
P_SCORE		= 1	# score
P_REST		= 2	# 残機数
P_STAGE		= 3	# 面数
P_PFLAG		= 4	# flag
P_RAINBOW	= 5	# レインボー発生フラグ＆カウンター
P_KEYDAT	= 6	# キーデータ
P_KEYTRG	= 7	# キートリガ

PF_EXTEND	= 0x01		# bit0 extend exe flag
PF_TORIDE	= 0x02		# bit1 とりで初期化フラグ
PF_MDEG		= 0x04		# bit2 game_flag F_MDEG save
PF_DOWN		= 0x08		# bit3 game_flag F_DOWN save

inv_move_cnt = 0	#インベーダー移動音カウンタ
ufo_move_cnt = 0	#UFO移動音カウンタ
sound_cnt = 0

playtime		= 0
playtime_save	= 0

O_PWORK 	= [0 for i in range(0x10)]

#ヒットチェック用テーブル
#hit_table[9][16]
hit_table = [[0 for i in range(16)] for j in range(9)]

#インベーダーの弾のヒットチェック位置（左側）
etl_hit_table = [[0 for i in range(2)] for j in range(13)]

#インベーダーの弾のヒットチェック位置（右側）
etr_hit_table = [[0 for i in range(2)] for j in range(13)]

etama_tbl1 = [0 for i in range(17)]
etama_tbl1 = [ 1, 7, 1, 1, 1, 4,11, 1, 6, 3, 1, 1,11, 9, 2, 8, 2 ]
etama_tbl2 = [0 for i in range(17)]
etama_tbl2 = [ 11, 1, 6, 3, 1, 1,11, 9, 2, 8, 2,11, 4, 7,10, 5, 2 ]

#ショットカウンタ&0x0fから求める
ufo_score = [0 for i in range(16)]
ufo_score = [ 100, 50, 50, 100, 150, 100, 100, 50, 300, 100, 100, 100, 50, 150, 100, 100 ]

invader_init_hight = [0 for i in range(10)]
invader_init_hight = [0x70,0x80,0x90,0xa0,0x80,0x90,0xa0,0x90,0xa0,0xb0]

#---------------------------------------------------------------------------------------------------
# 変数
#dot_check用（描画位置の色データ）
#poscol = [[0 for i in range(3)] for j in range(XSIZE*YSIZE)]
#描画用
pos = [[0 for i in range(2)] for j in range(XSIZE*YSIZE)]
#シーン番号
scene_number		= 0
#タイトルアニメーション用
title_counter		= 0

now_score			= 0		#スコア
high_score			= 0		#ハイスコア
credit				= 0		#クレジット
game_color_mode		= 0
move_speed			= 2		#インベーダー移動スピード

inv_live_num		= 0		#invader live number
inv_live_num2		= 0		#invader live number
inv_move_num 		= 0		#invader move number
inv_move_num2 		= 0		#invader move number★未使用
turn_num			= 0		#1 turn through counter

shot_counter		= 0		#プレイヤーショットカウンター
save_shot_counter	= 0
gameover_counter	= 0
ranking_counter		= 0
over_count			= 0		#ゲームオーバー時のカウント
appear_count		= 0		#プレイヤー登場カウンタ
break_counter		= 0		#敵爆発カウンター★未使用
break_number		= 0		#敵番号★未使用
etama_counter		= 0		#敵弾出現カウンター
etama_counter2		= 0		#敵弾出現カウンター（プレイヤーウエイト）
etama_num			= 0		#敵弾順番		
etama_cnt1			= 0		#etama_tbl1 number
etama_cnt2			= 0		#etama_tbl2 number
ufo_counter			= 0

shot_condition		= 0

right_side			= 0		#invader right side number
left_side			= 0		#invader left side number

ptama_crash			= 0		#プレイヤー弾爆発カウンタ
name_entry_counter	= 0
entry				= 0
entry_select		= 0
entry_select_old	= 0
entry_rank			= 0		#エントリーする順位

save_inv_ypos		= 0
save_inv_num		= 0

#setcnt				= [0 for i in range(NAME_MOJI_MAX)]★未使用
setmoji				= [0 for i in range(NAME_MOJI_MAX)]
setmoji = [0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a]

inv_hight	= [0 for i in range(12)]	#インベーダーの生きている高さデータ
inv_tama	= [0 for i in range(4)]		#インベーダーの弾の移動＆アニメカウンタ
inv_tama2	= [0 for i in range(4)]		#インベーダーの弾のＹ座標

#ゲームフラグ
GF_SCUPDATE	= 0x200		# bit9 ハイスコア更新
GF_EXTEND	= 0x100		# bit8 エクステンド
GF_CAPT		= 0x80		# bit7 capture
GF_PDEAD	= 0x40		# bit6 プレイヤーやられ 
GF_UFO		= 0x20		# bit5 UFO出現フラグ
GF_RESTART	= 0x10		# bit4 プレイヤー再スタート
GF_EHIT		= 0x08		# bit3 敵ヒットパターン中
GF_LOOP		= 0x04		# bit2 dead invader is re move
GF_DOWN		= 0x02		# bit1 down move
GF_MDEG		= 0x01		# bit0 move deg  0/1=right/left

#---------------------------------------------------------------------------------------------------
# メインループ
SCENE_POWERON			= 0
SCENE_INIT				= 1
SCENE_TITLE				= 2
SCENE_START				= 3
SCENE_RESTART			= 4
SCENE_GAME_INIT			= 5
SCENE_GAME				= 6
SCENE_GAMEOVER_READY	= 7
SCENE_GAMEOVER			= 8
SCENE_NAME_ENTRY_INIT	= 9
SCENE_NAME_ENTRY		= 10
SCENE_RANKING_INIT		= 11
SCENE_RANKING			= 12
SCENE_RANKING2_INIT		= 13
SCENE_RANKING			= 14
SCENE_RANKING2_INIT		= 15

scene_number = SCENE_POWERON

game_flag = 0

#---------------------------------------------------------------------------------------------------
# 初期座標セット
for yp in range(YSIZE):
	for xp in range(XSIZE):
		pos[yp * XSIZE + xp][0] = xp * (RADIUS+DDOT)	#xpos
		pos[yp * XSIZE + xp][1] = yp * (RADIUS+DDOT)	#ypos

#---------------------------------------------------------------------------------------------------
# 関数
#---------------------------------------------------------------------------------------------------
#任意の基数の文字列へ変換する（16進数ならbase=16）
def int2str(n, base):
	if not 2 <= base <= 36:
		raise ValueError('base must be between 2 and 36')

	table = '0123456789abcdefghijklmnopqrstuvwxyz'
	buf = []
	while True:
		n, r = divmod(n, base)
		buf.append(table[r])
		if n == 0: break
	return ''.join(buf)

#---------------------------------------------------------------------------------------------------
#entry_tableのコードを文字列に変更する
def code2str( code ):
	if code >= 0 and code < 0x2b:
		return str(entry_table[code])
	return ''

#---------------------------------------------------------------------------------------------------
# ドット描画
def dot_put( xp, yp, color_mode ):

	global XSIZE,XSIZE2
	global YSIZE,YSIZE2
	global RADIUS,RADIUS2
	global DDOT,DDOT2
	global title_xoff,title_yoff
	global TT_KANKAKU
	
	col = 0

	if color_mode == 2:		#タイトル
		kankaku = TT_KANKAKU
		base_yp = title_yoff
		ofs = (RADIUS2+DDOT2)/2
		if(( base_yp <= yp ) and ( yp < (base_yp+(ofs*16/2)) )):	#上１
			#GREEN
			col = 1
		elif((( base_yp + (ofs*16/2)) <= yp ) and ( yp < (base_yp+(ofs*16))) ):		#上２
			#MIZUIRO
			col = 2
		elif(( (base_yp+(ofs*16)+kankaku) <= yp ) and ( yp < (base_yp+(ofs*16)+kankaku+(ofs*8/2)) )):	#下１
			#PURPLE
			col = 3
		elif(( (base_yp+(ofs*16)+kankaku+(ofs*8/2)) <= yp ) and ( yp < (base_yp+(ofs*16)+kankaku+(ofs*8)) )):	#下２
			#YELLOW
			col = 4
		elif(( (base_yp+(ofs*16)+kankaku+(ofs*8)+kankaku) <= yp ) and ( yp < (base_yp+(ofs*16)+kankaku+(ofs*8)+kankaku+(ofs*4/2)) )):	#おまけ１
			#RED
			col = 5
		elif(( (base_yp+(ofs*16)+kankaku+(ofs*8)+kankaku+(ofs*4/2)) <= yp ) and ( yp < (base_yp+(ofs*16)+kankaku+(ofs*8)+kankaku+(ofs*4)) )):	#おまけ２
			#RED
			col = 5
		else:
			#WHITE
			col = 7
		pyxel.rect(xp, yp, RADIUS2+DDOT, (RADIUS2+DDOT2)/2, col)			#ここでインベーダーの目の隙間作る

	elif color_mode == 1:
		col = 0
		if( yp < 0x30 ):
			#PURPLE
			col = 3
		elif(( 0x20 <= yp ) and ( yp < 0x40 )):
			#GREEN
			col = 1
		elif(( 0x40 <= yp ) and ( yp < 0x60 )):
			#MIZUIRO
			col = 2
		elif(( 0x60 <= yp ) and ( yp < 0x80 )):
			#PURPLE
			col = 3
		elif(( 0x80 <= yp ) and ( yp < 0xa0 )):
			#YELLOW
			col = 4
		elif(( 0xa0 <= yp ) and ( yp < 0xc0 )):
			#RED
			col = 5
		elif(( 0xc0 <= yp ) and ( yp < 0xd0 )):
			#MIZUIRO
			col = 2
		elif(( 0xc0 <= yp ) and ( yp < 0xe0 )):
			#GREEN
			col = 1
		elif( 0xf0 <= yp ):
			#BLUE
			col = 6
		else:
			#MIZUIRO
			col = 2
		pyxel.pset(xp, yp, col)

	else:	#font use
		pyxel.pset(xp, yp, 7)


#---------------------------------------------------------------------------------------------------
# タイトル用ドット削除
def dot_erase2( xp, yp ):
	pyxel.rect( xp, yp, RADIUS2+DDOT2, (RADIUS2+DDOT2)/2, 0 )

# ドット削除
def dot_erase( xp, yp ):
	pyxel.pset( xp, yp, 0 )

#---------------------------------------------------------------------------------------------------
# その位置のドットの存在をチェックする
# ret : 0/1 = no(black)/yes(not black)
def dot_check( xp, yp ):
	col = pyxel.pget(xp,yp)
	if col == 0:
		return 0
	else:
		return 1

#---------------------------------------------------------------------------------------------------
#指定された位置にボックス削除します
def dot_box_erase( dx, dy ):
	i = 0
	j = 0
	for j in range(dy-8, dy+8):
		for i in range(dx, dx+0x0f):
			dot_erase( i,j )

#---------------------------------------------------------------------------------------------------
#UFOボーナス削除
def dot_ufobox_erase( dx, dy ):
	i = 0
	j = 0
	for j in range(dy-8, dy+8):
		for i in range(dx, dx+0x20):
			dot_erase( i,j )


#---------------------------------------------------------------------------------------------------
# 指定された位置にパターン描画(1)／削除(0)します

DOT_PATTERN_UFO050		= 0x00
DOT_PATTERN_UFO100		= 0x01
DOT_PATTERN_UFO150		= 0x02
DOT_PATTERN_UFO300		= 0x03
DOT_PATTERN_TBRK		= 0x04
DOT_PATTERN_YBRK		= 0x05
DOT_PATTERN_RAINBOW1	= 0x06
DOT_PATTERN_RAINBOW2	= 0x07
DOT_PATTERN_TAKO1		= 0x08
DOT_PATTERN_TAKO2		= 0x09
DOT_PATTERN_KANI1		= 0x0a
DOT_PATTERN_KANI2		= 0x0b
DOT_PATTERN_IKA1		= 0x0c
DOT_PATTERN_IKA2		= 0x0d
DOT_PATTERN_HOUDAI		= 0x0e
DOT_PATTERN_TOCHIKA		= 0x0f
DOT_PATTERN_UFO			= 0x10
DOT_PATTERN_PTAMA		= 0x11
DOT_PATTERN_ETAMA11		= 0x12
DOT_PATTERN_ETAMA12		= 0x13
DOT_PATTERN_ETAMA13		= 0x14
DOT_PATTERN_ETAMA14		= 0x15
DOT_PATTERN_ETAMA21		= 0x16
DOT_PATTERN_ETAMA22		= 0x17
DOT_PATTERN_ETAMA23		= 0x18
DOT_PATTERN_ETAMA24		= 0x19
DOT_PATTERN_ETAMA31		= 0x1a
DOT_PATTERN_ETAMA32		= 0x1b
DOT_PATTERN_ETAMA33		= 0x1c
DOT_PATTERN_ETAMA34		= 0x1d
DOT_PATTERN_EBRK		= 0x1e
DOT_PATTERN_PBRK1		= 0x20
DOT_PATTERN_PBRK2		= 0x21

def dot_pattern( type, dx, dy, dn, color_mode):
	if type != 0:
		type = 1
	adr = 0
	if dn == DOT_PATTERN_UFO050: 
		adr = o_dottbl0		#UFO 50pts.
	elif dn == DOT_PATTERN_UFO100: 
		adr = o_dottbl1		#UFO 100pts.
	elif dn == DOT_PATTERN_UFO150: 
		adr = o_dottbl2		#UFO 150pts.
	elif dn == DOT_PATTERN_UFO300: 
		adr = o_dottbl3		#UFO 300pts.
	elif dn == DOT_PATTERN_TBRK: 
		adr = o_dottbl4		#縦着弾
	elif dn == DOT_PATTERN_YBRK: 
		adr = o_dottbl5		#横着弾
	elif dn == DOT_PATTERN_RAINBOW1: 
		adr = o_dottbl6		#レインボー１
	elif dn == DOT_PATTERN_RAINBOW2: 
		adr = o_dottbl7		#レインボー２
	elif dn == DOT_PATTERN_TAKO1: 
		adr = o_dottbl8		#タコ１
	elif dn == DOT_PATTERN_TAKO2: 
		adr = o_dottbl9		#タコ２
	elif dn == DOT_PATTERN_KANI1:
		adr = o_dottbla		#カニ１
	elif dn == DOT_PATTERN_KANI2: 
		adr = o_dottblb		#カニ２
	elif dn == DOT_PATTERN_IKA1:
		adr = o_dottblc		#イカ１
	elif dn == DOT_PATTERN_IKA2: 
		adr = o_dottbld		#イカ２
	elif dn == DOT_PATTERN_HOUDAI: 
		adr = o_dottble		#砲台
	elif dn == DOT_PATTERN_TOCHIKA: 
		adr = o_dottblf		#トーチカ（砦）
	elif dn == DOT_PATTERN_UFO: 
		adr = o_dottbl10	#UFO
	elif dn == DOT_PATTERN_PTAMA: 
		adr = o_dottbl11	#砲台の弾
	elif dn == DOT_PATTERN_ETAMA11: 
		adr = o_dottbl12	#敵弾１
	elif dn == DOT_PATTERN_ETAMA12: 
		adr = o_dottbl13	#
	elif dn == DOT_PATTERN_ETAMA13: 
		adr = o_dottbl14	#
	elif dn == DOT_PATTERN_ETAMA14: 
		adr = o_dottbl15	#
	elif dn == DOT_PATTERN_ETAMA21: 
		adr = o_dottbl16	#敵弾２
	elif dn == DOT_PATTERN_ETAMA22: 
		adr = o_dottbl17	#
	elif dn == DOT_PATTERN_ETAMA23: 
		adr = o_dottbl18	#
	elif dn == DOT_PATTERN_ETAMA24: 
		adr = o_dottbl19	#
	elif dn == DOT_PATTERN_ETAMA31: 
		adr = o_dottbl1a	#敵弾３
	elif dn == DOT_PATTERN_ETAMA32: 
		adr = o_dottbl1b	#
	elif dn == DOT_PATTERN_ETAMA33: 
		adr = o_dottbl1c	#
	elif dn == DOT_PATTERN_ETAMA34: 
		adr = o_dottbl1d	#
	elif dn == DOT_PATTERN_EBRK: 
		adr = o_dottbl1e	#敵やられ
	elif dn == 0x1f: 
		adr = o_dottbl1f	#（無し）
	elif dn == DOT_PATTERN_PBRK1: 
		adr = o_dottbl20	#砲台やられ１
	elif dn == DOT_PATTERN_PBRK2: 
		adr = o_dottbl21	#砲台やられ２
	else:
		return

	i = 0
	while (adr[i*2] != 0xff):
		if( type == 0 ):
			dot_erase(dx + adr[i*2+0], dy + adr[i*2+1])
		else:
			dot_put(dx + adr[i*2+0], dy + adr[i*2+1], color_mode)
		i+=1

#---------------------------------------------------------------------------------------------------
#指定された位置にパターン削除します
def dot_pattern_erase( dx, dy, dn ):
	dot_pattern( 0, dx, dy, dn )

#---------------------------------------------------------------------------------------------------
#指定された位置にパターンで置きます
def dot_pattern_put( dx, dy, dn ):
	dot_pattern( 1, dx, dy, dn )

#---------------------------------------------------------------------------------------------------
# 指定された位置にフォントパターン(8x8)描画(1)／削除(0)します
def dot_font( type, dx, dy, dn, color_mode):
	if type != 0:
		type = 1
	adr = 0
	if dn == 0x00:
		adr = o_dotfont_SPACE
	elif dn == 0x28: 
		adr = o_dotfont_KAKKO1
	elif dn == 0x29: 
		adr = o_dotfont_KAKKO2
	elif dn == 0x2c: 
		adr = o_dotfont_CONNMA
	elif dn == 0x2d: 
		adr = o_dotfont_HAIHUN
	elif dn == 0x2e: 
		adr = o_dotfont_PERIOD
	elif dn == 0x2f: 
		adr = o_dotfont_SHASEN
	elif dn == 0x30: 
		adr = o_dotfont_0
	elif dn == 0x31: 
		adr = o_dotfont_1
	elif dn == 0x32: 
		adr = o_dotfont_2
	elif dn == 0x33: 
		adr = o_dotfont_3
	elif dn == 0x34: 
		adr = o_dotfont_4
	elif dn == 0x35: 
		adr = o_dotfont_5
	elif dn == 0x36: 
		adr = o_dotfont_6
	elif dn == 0x37: 
		adr = o_dotfont_7
	elif dn == 0x38: 
		adr = o_dotfont_8
	elif dn == 0x39: 
		adr = o_dotfont_9
	elif dn == 0x3c: 
		adr = o_dotfont_RD
	elif dn == 0x3e: 
		adr = o_dotfont_ED
	elif dn == 0x40: 
		adr = o_dotfont_BETA
	elif dn == 0x41: 
		adr = o_dotfont_A
	elif dn == 0x42: 
		adr = o_dotfont_B
	elif dn == 0x43: 
		adr = o_dotfont_C
	elif dn == 0x44: 
		adr = o_dotfont_D
	elif dn == 0x45: 
		adr = o_dotfont_E
	elif dn == 0x46: 
		adr = o_dotfont_F
	elif dn == 0x47: 
		adr = o_dotfont_G
	elif dn == 0x48: 
		adr = o_dotfont_H
	elif dn == 0x49: 
		adr = o_dotfont_I
	elif dn == 0x4a: 
		adr = o_dotfont_J
	elif dn == 0x4b: 
		adr = o_dotfont_K
	elif dn == 0x4c: 
		adr = o_dotfont_L
	elif dn == 0x4d: 
		adr = o_dotfont_M
	elif dn == 0x4e: 
		adr = o_dotfont_N
	elif dn == 0x4f: 
		adr = o_dotfont_O
	elif dn == 0x50: 
		adr = o_dotfont_P
	elif dn == 0x51: 
		adr = o_dotfont_Q
	elif dn == 0x52: 
		adr = o_dotfont_R
	elif dn == 0x53: 
		adr = o_dotfont_S
	elif dn == 0x54: 
		adr = o_dotfont_T
	elif dn == 0x55: 
		adr = o_dotfont_U
	elif dn == 0x56: 
		adr = o_dotfont_V
	elif dn == 0x57: 
		adr = o_dotfont_W
	elif dn == 0x58: 
		adr = o_dotfont_X
	elif dn == 0x59: 
		adr = o_dotfont_Y
	elif dn == 0x5a: 
		adr = o_dotfont_Z
	else:
		return

	i = 0
	while (adr[i*2] != 0xff):
		if( type == 0 ):
			dot_erase(dx + adr[i*2+0], dy + adr[i*2+1])
		else:
			dot_put(dx + adr[i*2+0], dy + adr[i*2+1], color_mode)
		i+=1


#---------------------------------------------------------------------------------------------------
# タイトル用
# 指定された位置にパターン描画(1)／削除(0)します
def line_pattern( type, dx, dy, dn ):
	if(type != 0):
		type = 1
	dot = 0
	adr = [0 for dot in range(0x32)]
	if dn == 0x00:
		adr = t_dottblup_h
	elif dn == 0x01:
		adr = t_dottblup_0
	elif dn == 0x02: 
		adr = t_dottblup_1
	elif dn == 0x03: 
		adr = t_dottblup_2
	elif dn == 0x04: 
		adr = t_dottblup_3
	elif dn == 0x05: 
		adr = t_dottblup_4
	elif dn == 0x06: 
		adr = t_dottblup_5
	elif dn == 0x07: 
		adr = t_dottblup_6
	elif dn == 0x08: 
		adr = t_dottblup_7
	elif dn == 0x09: 
		adr = t_dottblup_8
	elif dn == 0x0a: 
		adr = t_dottblup_9
	elif dn == 0x0b: 
		adr = t_dottblup_a
	elif dn == 0x0c: 
		adr = t_dottblup_b
	elif dn == 0x0d: 
		adr = t_dottblup_c
	elif dn == 0x0e: 
		adr = t_dottblup_d
	elif dn == 0x0f: 
		adr = t_dottblup_e
	elif dn == 0x10: 
		adr = t_dottblup_f
	elif dn == 0x11: 
		adr = t_dottbldn_h
	elif dn == 0x12: 
		adr = t_dottbldn_0
	elif dn == 0x13: 
		adr = t_dottbldn_1
	elif dn == 0x14: 
		adr = t_dottbldn_2
	elif dn == 0x15: 
		adr = t_dottbldn_3
	elif dn == 0x16: 
		adr = t_dottbldn_4
	elif dn == 0x17: 
		adr = t_dottbldn_5
	elif dn == 0x18: 
		adr = t_dottbldn_6
	elif dn == 0x19: 
		adr = t_dottbldn_7
	elif dn == 0x1a: 
		adr = t_dottbldd_h

#	elif dn == 0x1b: 
#		adr = t_dottbldd_0
#	elif dn == 0x1c: 
#		adr = t_dottbldd_1
#	elif dn == 0x1d: 
#		adr = t_dottbldd_2
#	elif dn == 0x1e: 
#		adr = t_dottbldd_3
	else:
		return

	i = 0
	while (adr[i] != 0xff):
		if( type == 0 ):
			dot_erase2( dx + ( adr[i] * int(( RADIUS2 + DDOT2 )/2) ), dy )
		else:
			dot_put( dx + ( adr[i] * int(( RADIUS2 + DDOT2 )/2) ), dy, 2 )
		i+=1

#---------------------------------------------------------------------------------------------------
#画面クリア
def clear_screen():
	pyxel.cls(0)

#---------------------------------------------------------------------------------------------------
#フォントテキストセット（side=1:右揃え（スコア用）））
def set_font_text( px, py, string, side, color_mode ):
	code = 0x00
	if side == 1:
		if((len(string) > 5 ) or (len(string)<0)):
			return
		codelist = list(string)
		for i in range(5):
			if( len(string) < (5-i) ):
				code = 0x00
			else:
				code = ord(codelist[5-1-i])
			dot_font(1, px + (i*8), py, code, color_mode)
	else:
		codelist = list(string)
		for i in range( len(string) ):
			code = ord(codelist[i])
			dot_font(1, px + (i*8), py, code, color_mode)

#フォント１文字削除
def set_font_erase( px, py ):
	dot_font(0, px , py, 0, 0)


#---------------------------------------------------------------------------------------------------
# 初期化（リスタート用）
def init():

	global right_side
	global left_side
	global inv_move_num
	global inv_move_num2
	global inv_live_num
	global inv_live_num2
	global turn_num
	global credit
	global over_count
	global etama_counter
	global etama_counter2
	global etama_num
	global etama_cnt1
	global etama_cnt2
	global appear_count
	global ufo_counter
	global shot_counter

	O_PWORK[P_STAGE] += 1		# ステージ数インクリメント（stage1～

	O_SPR_WORK[0x00] = [ 0x00,0x00,0xc8,0x78,0x00 ]				# 00)player
	O_SPR_WORK[0x01] = [ 0x00,0x01,0xa0,0x00,0x00 ]				# 01)player tama
	O_SPR_WORK[0x02] = [ 0x00,0x02,0x28,0x70,0x00 ]				# 02)ufo

	base_yp = invader_init_hight[(O_PWORK[P_STAGE]-1) % 10]
	
	O_SPR_WORK[0x03] = [ 0x40,0x05,base_yp-0x00,0x28,0x00 ]		# 03)invader 2 down
	O_SPR_WORK[0x04] = [ 0x40,0x05,base_yp-0x00,0x38,0x00 ]		# 04)
	O_SPR_WORK[0x05] = [ 0x40,0x05,base_yp-0x00,0x48,0x00 ]		# 05)
	O_SPR_WORK[0x06] = [ 0x40,0x05,base_yp-0x00,0x58,0x00 ]		# 06)
	O_SPR_WORK[0x07] = [ 0x40,0x05,base_yp-0x00,0x68,0x00 ]		# 07)
	O_SPR_WORK[0x08] = [ 0x40,0x05,base_yp-0x00,0x78,0x00 ]		# 08)
	O_SPR_WORK[0x09] = [ 0x40,0x05,base_yp-0x00,0x88,0x00 ]		# 09)
	O_SPR_WORK[0x0a] = [ 0x40,0x05,base_yp-0x00,0x98,0x00 ]		# 0a)
	O_SPR_WORK[0x0b] = [ 0x40,0x05,base_yp-0x00,0xa8,0x00 ]		# 0b)
	O_SPR_WORK[0x0c] = [ 0x40,0x05,base_yp-0x00,0xb8,0x00 ]		# 0c)
	O_SPR_WORK[0x0d] = [ 0x40,0x05,base_yp-0x00,0xc8,0x00 ]		# 0d)
	O_SPR_WORK[0x0e] = [ 0x40,0x05,base_yp-0x10,0x28,0x00 ]		# 0e)invader 2 up
	O_SPR_WORK[0x0f] = [ 0x40,0x05,base_yp-0x10,0x38,0x00 ]		# 0f)
	O_SPR_WORK[0x10] = [ 0x40,0x05,base_yp-0x10,0x48,0x00 ]		# 10)
	O_SPR_WORK[0x11] = [ 0x40,0x05,base_yp-0x10,0x58,0x00 ]		# 11)
	O_SPR_WORK[0x12] = [ 0x40,0x05,base_yp-0x10,0x68,0x00 ]		# 12)
	O_SPR_WORK[0x13] = [ 0x40,0x05,base_yp-0x10,0x78,0x00 ]		# 13)
	O_SPR_WORK[0x14] = [ 0x40,0x05,base_yp-0x10,0x88,0x00 ]		# 14)
	O_SPR_WORK[0x15] = [ 0x40,0x05,base_yp-0x10,0x98,0x00 ]		# 15)
	O_SPR_WORK[0x16] = [ 0x40,0x05,base_yp-0x10,0xa8,0x00 ]		# 16)
	O_SPR_WORK[0x17] = [ 0x40,0x05,base_yp-0x10,0xb8,0x00 ]		# 17)
	O_SPR_WORK[0x18] = [ 0x40,0x05,base_yp-0x10,0xc8,0x00 ]		# 18)
	O_SPR_WORK[0x19] = [ 0x40,0x04,base_yp-0x20,0x28,0x00 ]		# 19)invader 1 down
	O_SPR_WORK[0x1a] = [ 0x40,0x04,base_yp-0x20,0x38,0x00 ]		# 1a)
	O_SPR_WORK[0x1b] = [ 0x40,0x04,base_yp-0x20,0x48,0x00 ]		# 1b)
	O_SPR_WORK[0x1c] = [ 0x40,0x04,base_yp-0x20,0x58,0x00 ]		# 1c)
	O_SPR_WORK[0x1d] = [ 0x40,0x04,base_yp-0x20,0x68,0x00 ]		# 1d)
	O_SPR_WORK[0x1e] = [ 0x40,0x04,base_yp-0x20,0x78,0x00 ]		# 1e)
	O_SPR_WORK[0x1f] = [ 0x40,0x04,base_yp-0x20,0x88,0x00 ]		# 1f)
	O_SPR_WORK[0x20] = [ 0x40,0x04,base_yp-0x20,0x98,0x00 ]		# 20)
	O_SPR_WORK[0x21] = [ 0x40,0x04,base_yp-0x20,0xa8,0x00 ]		# 21)
	O_SPR_WORK[0x22] = [ 0x40,0x04,base_yp-0x20,0xb8,0x00 ]		# 22)
	O_SPR_WORK[0x23] = [ 0x40,0x04,base_yp-0x20,0xc8,0x00 ]		# 23)
	O_SPR_WORK[0x24] = [ 0x40,0x04,base_yp-0x30,0x28,0x00 ]		# 24)invader 1 up
	O_SPR_WORK[0x25] = [ 0x40,0x04,base_yp-0x30,0x38,0x00 ]		# 25)
	O_SPR_WORK[0x26] = [ 0x40,0x04,base_yp-0x30,0x48,0x00 ]		# 26)
	O_SPR_WORK[0x27] = [ 0x40,0x04,base_yp-0x30,0x58,0x00 ]		# 27)
	O_SPR_WORK[0x28] = [ 0x40,0x04,base_yp-0x30,0x68,0x00 ]		# 28)
	O_SPR_WORK[0x29] = [ 0x40,0x04,base_yp-0x30,0x78,0x00 ]		# 29)
	O_SPR_WORK[0x2a] = [ 0x40,0x04,base_yp-0x30,0x88,0x00 ]		# 2a)
	O_SPR_WORK[0x2b] = [ 0x40,0x04,base_yp-0x30,0x98,0x00 ]		# 2b)
	O_SPR_WORK[0x2c] = [ 0x40,0x04,base_yp-0x30,0xa8,0x00 ]		# 2c)
	O_SPR_WORK[0x2d] = [ 0x40,0x04,base_yp-0x30,0xb8,0x00 ]		# 2d)
	O_SPR_WORK[0x2e] = [ 0x40,0x04,base_yp-0x30,0xc8,0x00 ]		# 2e)
	O_SPR_WORK[0x2f] = [ 0x40,0x03,base_yp-0x40,0x28,0x00 ]		# 2f)invader 0
	O_SPR_WORK[0x30] = [ 0x40,0x03,base_yp-0x40,0x38,0x00 ]		# 30)
	O_SPR_WORK[0x31] = [ 0x40,0x03,base_yp-0x40,0x48,0x00 ]		# 31)
	O_SPR_WORK[0x32] = [ 0x40,0x03,base_yp-0x40,0x58,0x00 ]		# 32)
	O_SPR_WORK[0x33] = [ 0x40,0x03,base_yp-0x40,0x68,0x00 ]		# 33)
	O_SPR_WORK[0x34] = [ 0x40,0x03,base_yp-0x40,0x78,0x00 ]		# 34)
	O_SPR_WORK[0x35] = [ 0x40,0x03,base_yp-0x40,0x88,0x00 ]		# 35)
	O_SPR_WORK[0x36] = [ 0x40,0x03,base_yp-0x40,0x98,0x00 ]		# 36)
	O_SPR_WORK[0x37] = [ 0x40,0x03,base_yp-0x40,0xa8,0x00 ]		# 37)
	O_SPR_WORK[0x38] = [ 0x40,0x03,base_yp-0x40,0xb8,0x00 ]		# 38)
	O_SPR_WORK[0x39] = [ 0x40,0x03,base_yp-0x40,0xc8,0x00 ]		# 39)

	O_SPR_WORK[0x3a] = [ 0x00,0x06,0x90,0x80,0x00 ]				# 3a)invader tama
	O_SPR_WORK[0x3b] = [ 0x00,0x06,0x90,0x80,0x00 ]				# 3b)
	O_SPR_WORK[0x3c] = [ 0x00,0x06,0x90,0x80,0x00 ]				# 3c)

	O_SPR_WORK[0x3d] = [ 0x40,0x09,0xb0,0x32,0x00 ]				# 3d)toride
	O_SPR_WORK[0x3e] = [ 0x40,0x09,0xb0,0x62,0x00 ]				# 3e)
	O_SPR_WORK[0x3f] = [ 0x40,0x09,0xb0,0x92,0x00 ]				# 3f)
	O_SPR_WORK[0x40] = [ 0x40,0x09,0xb0,0xc2,0x00 ]				# 40)

	O_SPR_WORK[0x41] = [ 0x00,0x00,0xa0,0x00,0x00 ]				# 41)non

	for i in range(12):
		inv_hight[i] = 0
	for i in range(4):
		inv_tama[i] = 0
		inv_tama2[i] = 0

	right_side = 11-1		#インベーダー右端の番号
	left_side  = 1-1		#インベーダー左端の番号
	inv_move_num = 0
	inv_move_num2 = 0
	inv_live_num = 0
	inv_live_num2 = 0
	turn_num = 0
	credit = 0
	over_count = 0
	etama_counter = 0
	etama_counter2 = 0
	etama_num = 0
	etama_cnt1 = 0
	etama_cnt2 = 0

	O_PWORK[P_RAINBOW] = 0
	
	# プレイヤー初期化
	O_SPR_WORK[spw_player][cond] = F_ACTIVE
	O_SPR_WORK[spw_ptama][cond]  = F_ACTIVE
	appear_count = 0
	ufo_counter = 0
	shot_counter = 0


#---------------------------------------------------------------------------------------------------
#残機表示
def rest_put(restnum):

	global scene_number
	global game_flag

	i = 0
	k = 0

	if( restnum == 99 ):
		O_PWORK[P_REST] = 0
		scene_number = SCENE_GAMEOVER_READY		#ゲームオーバー

	elif( restnum == 1 ):
		#追加
		O_PWORK[P_REST] += 1
	elif( restnum == (-1) ):
		#削除
		O_PWORK[P_REST] -= 1
	#else:
		#変更なし描画

	k = O_PWORK[P_REST]
	if(k > 7):		#７以上にはなりえない（設定は６機まで、つまり最大７）
		k = 7
	
	#全削除
	for i in range(7):
		dot_pattern(0,LIM_LEFT + (i * 16), 0xe0, DOT_PATTERN_HOUDAI, game_color_mode)

	#描画
	for i in range(k):
		dot_pattern(1, LIM_LEFT + (i * 16), 0xe0, DOT_PATTERN_HOUDAI, game_color_mode)

	if( restnum == (-1) ):
		if( O_PWORK[P_REST] < 0 ):
			scene_number = SCENE_GAMEOVER_READY		#ゲームオーバー
		else:
			game_flag &= ~GF_PDEAD


#---------------------------------------------------------------------------------------------------
#ENTRY削除
def dot_entrybox_erase( dx, dy ):
	i = 0
	j = 0
	for j in range( dy, dy + 0x08 ):
		for i in range( dx, dx + 0x08 ):
			dot_erase( i, j )

#---------------------------------------------------------------------------------------------------
#SCORE削除
def dot_scorebox_erase( dx, dy ):
	i = 0
	j = 0
	for j in range( dy, dy + 0x08 ):
		for i in range( dx, dx + 0x30 ):
			dot_erase( i, j )

#---------------------------------------------------------------------------------------------------
#スコア表示
def draw_score():
	global high_score
	global now_score

	#ハイスコア更新
	if high_score < now_score:
		high_score = now_score

	set_font_text( 0x20, 0x04,'SCORE(1)', 0, 0 )
	set_font_text( 0x80, 0x04,'HI-SCORE', 0, 0 )
	
	dot_scorebox_erase( 0x20, 0x10 )
	set_font_text( 0x30, 0x10, int2str(now_score, 10), 1, 0 )
	dot_scorebox_erase( 0x80, 0x10 )
	set_font_text( 0x90, 0x10, int2str(high_score, 10), 1, 0 )

#---------------------------------------------------------------------------------------------------
#スコア加算＋エクステンド
def score_add( add_score ):
	global game_flag
	global now_score

	if( add_score != 0 ):
		now_score += add_score
		#エクステンドチェック
		if( ( game_flag & GF_EXTEND ) == 0 ):
			if( now_score >= 1500 ):
				game_flag |= GF_EXTEND
				#残機加算
				rest_put(1)
				#[SOUND]EXTRA音
				pyxel.play(2,27)

#---------------------------------------------------------------------------------------------------
#クレジット表示
def draw_credit():
	set_font_text( 0xc0, 0xA0,'CREDIT', 0, 0 )
	dot_scorebox_erase( 0xD8, 0xF0 )
	set_font_text( 0xD8, 0xF0, int2str(credit, 10), 1, 0 )


#---------------------------------------------------------------------------------------------------
#占領されたかどうかのチェック
def capture_check():
	#グローバル変数宣言
	global game_flag
	global save_inv_ypos
	global save_inv_num

	#最下段のinv_move_numを保存
	if((O_SPR_WORK[inv_move_num+spw_enemy][cond] & F_LIVE) == F_LIVE):
		if save_inv_ypos < O_SPR_WORK[inv_move_num+spw_enemy][ypos]:
			save_inv_ypos = O_SPR_WORK[inv_move_num+spw_enemy][ypos]
			save_inv_num = inv_move_num

	if(O_SPR_WORK[save_inv_num+spw_enemy][ypos] >= LIM_E_DOWN):
		O_SPR_WORK[save_inv_num+spw_enemy][idpat] = (O_SPR_WORK[save_inv_num+spw_enemy][idpat] & 0x80) | 0x03
		game_flag |= (GF_CAPT+GF_PDEAD)
		rest_put(99)		#残機数0
		#[SOUND]プレイヤーやられ音
		pyxel.play(1,21)

#---------------------------------------------------------------------------------------------------
#インベーダー全滅チェック
def inv_all_dead_check():
	#グローバル変数宣言
	global scene_number
	global inv_live_num

	inv_live_num = 0
	for i in range(INV_MAX):
		if((O_SPR_WORK[spw_enemy+i][cond] & F_LIVE) == F_LIVE):
			inv_live_num+=1
	if(inv_live_num == 0):
		scene_number = SCENE_RESTART	#ステージクリア＆リスタート

#---------------------------------------------------------------------------------------------------
#インベーダー移動
def invader_move():
	#グローバル変数宣言
	global game_flag
	global inv_move_num
	global turn_num
	global right_side
	global left_side
	global inv_live_num
	global inv_live_num2
	global inv_move_cnt
	global sound_cnt

	i = 0
	j = 0
	code = 0
	exitFlg = 0
	right_side = INV_WIDTH_MAX-1	#インベーダー右端の番号
	left_side  = 1-1				#インベーダー左端の番号
	inv_live_num = 0
	inv_live_num2 = 0
	
	#ヒット処理
	for i in range(INV_MAX):
		if(O_SPR_WORK[spw_enemy+i][cond] & F_LIVE):
			if(O_SPR_WORK[spw_enemy+i][cond] & F_HIT2):
				O_SPR_WORK[spw_enemy+i][mcnt] += 1
				if( O_SPR_WORK[spw_enemy+i][mcnt] > 10 ):
					#クラッシュ削除
					dot_pattern(0, O_SPR_WORK[spw_enemy+i][xpos],O_SPR_WORK[spw_enemy+i][ypos],DOT_PATTERN_EBRK, game_color_mode )
					O_SPR_WORK[spw_enemy+i][cond] = 0
			elif(O_SPR_WORK[spw_enemy+i][cond] & F_HIT):
				#スコア加算
				if((O_SPR_WORK[spw_enemy+i][idpat] & 0x7f) == 3):
					score_add(30)
				elif((O_SPR_WORK[spw_enemy+i][idpat] & 0x7f) == 4):
					score_add(20)
				elif((O_SPR_WORK[spw_enemy+i][idpat] & 0x7f) == 5):
					score_add(10)
				#削除
				dot_box_erase(O_SPR_WORK[spw_enemy+i][xpos],O_SPR_WORK[spw_enemy+i][ypos])
				#クラッシュ描画
				dot_pattern(1, O_SPR_WORK[spw_enemy+i][xpos],O_SPR_WORK[spw_enemy+i][ypos],DOT_PATTERN_EBRK, game_color_mode )
				O_SPR_WORK[spw_enemy+i][cond] |= F_HIT2
				O_SPR_WORK[spw_enemy+i][mcnt] = 0

	if(( game_flag & GF_PDEAD) == 0 ):		#プレイヤー爆発中は移動できない
		#<<<<<< right and left side check ( move change ) >>>>>>>>>>>>>>>>>>
		#right side check
		inv_live_num2 = 0
		for j in range(right_side, 0, -1):
			for i in range(INV_HIGHT_MAX):
				if((O_SPR_WORK[spw_enemy+right_side+(INV_WIDTH_MAX*i)][cond] & F_LIVE) == F_LIVE):
					inv_live_num2+=1
			if(inv_live_num2 == 0):
				right_side-=1		#next set
			else:
				break

		#left side check
		inv_live_num2 = 0
		for j in range(left_side, INV_WIDTH_MAX):
			for i in range(INV_HIGHT_MAX):
				if((O_SPR_WORK[spw_enemy+left_side+(INV_WIDTH_MAX*i)][cond] & F_LIVE) == F_LIVE):
					inv_live_num2+=1
			if(inv_live_num2 == 0):
				left_side+=1		#next set
			else:
				break

		#invader hight check （弾出す敵用、下から並んでいる）
		for j in range(INV_WIDTH_MAX):
			exitFlg = 0
			for i in range(INV_HIGHT_MAX):
				if(O_SPR_WORK[spw_enemy+(INV_WIDTH_MAX*i)+j][cond] & F_LIVE):
					if((O_SPR_WORK[spw_enemy+(INV_WIDTH_MAX*i)+j][cond] & F_HIT) == 0):
						inv_hight[j] = i
						exitFlg = 1	#loop exit
						break
					if(0 == exitFlg):
						#未セットの時
						inv_hight[j] = 0xff

		#move degree check
		if(O_SPR_WORK[inv_move_num+spw_enemy][cond] & F_LIVE):
			if((O_SPR_WORK[inv_move_num+spw_enemy][cond] & F_HIT) == 0):

				#右移動
				if((game_flag & GF_MDEG) == 0):		#right move

					#移動前に今自分のいる部分を削除（右移動時 ）
					dot_box_erase(O_SPR_WORK[inv_move_num+spw_enemy][xpos],O_SPR_WORK[inv_move_num+spw_enemy][ypos])

					#移動
					O_SPR_WORK[inv_move_num+spw_enemy][xpos] = O_SPR_WORK[inv_move_num+spw_enemy][xpos] + 2
					#残り１体だけ？
					if(inv_live_num == 1):
						if((O_PWORK[P_RAINBOW] & 0x40) == 0):		#レインボーフラグチェック
							O_SPR_WORK[inv_move_num+spw_enemy][xpos] = O_SPR_WORK[inv_move_num+spw_enemy][xpos] + 1
						#１０点インベーダー？
						if((O_SPR_WORK[inv_move_num+spw_enemy][idpat] & 0x7f) == 0x05):
							#レインボーセット
							if((O_PWORK[P_RAINBOW] & 0x80) == 0):		#レインボーフラグチェック
								O_PWORK[P_RAINBOW] = 0x80
							#レインボー発生
							if(O_SPR_WORK[inv_move_num+spw_enemy][idpat] & 0x80):
								dot_pattern(1, O_SPR_WORK[inv_move_num+spw_enemy][xpos],O_SPR_WORK[inv_move_num+spw_enemy][ypos],DOT_PATTERN_RAINBOW2, game_color_mode )
							else:
								dot_pattern(1, O_SPR_WORK[inv_move_num+spw_enemy][xpos],O_SPR_WORK[inv_move_num+spw_enemy][ypos],DOT_PATTERN_RAINBOW1, game_color_mode )
					
					if(game_flag & GF_DOWN):		#down move
						if((game_flag & GF_CAPT) == 0):
							O_SPR_WORK[inv_move_num+spw_enemy][ypos] = O_SPR_WORK[inv_move_num+spw_enemy][ypos] + 8

					#移動し終わった、今自分のいる部分書き込み
					if( O_SPR_WORK[inv_move_num+spw_enemy][mcnt] & 0x01 ):
						if((O_SPR_WORK[inv_move_num+spw_enemy][idpat] & 0x7f) == 5):
							code = DOT_PATTERN_IKA2
						elif((O_SPR_WORK[inv_move_num+spw_enemy][idpat] & 0x7f) == 4):
							code = DOT_PATTERN_KANI2
						elif((O_SPR_WORK[inv_move_num+spw_enemy][idpat] & 0x7f) == 3):
							code = DOT_PATTERN_TAKO2
					else:
						if((O_SPR_WORK[inv_move_num+spw_enemy][idpat] & 0x7f) == 5):
							code = DOT_PATTERN_IKA1
						elif((O_SPR_WORK[inv_move_num+spw_enemy][idpat] & 0x7f) == 4):
							code = DOT_PATTERN_KANI1
						elif((O_SPR_WORK[inv_move_num+spw_enemy][idpat] & 0x7f) == 3):
							code = DOT_PATTERN_TAKO1
					dot_pattern( 1, O_SPR_WORK[inv_move_num+spw_enemy][xpos], O_SPR_WORK[inv_move_num+spw_enemy][ypos], code , game_color_mode )

				#左移動
				else:		#left move
					#移動前に今自分のいる部分を削除（ 左移動時 ）
					dot_box_erase(O_SPR_WORK[inv_move_num+spw_enemy][xpos],O_SPR_WORK[inv_move_num+spw_enemy][ypos])

					#移動
					O_SPR_WORK[inv_move_num+spw_enemy][xpos] = O_SPR_WORK[inv_move_num+spw_enemy][xpos] - 2

					#残り１体だけ？
					if(inv_live_num == 1):
						#１０点インベーダー？
						if((O_SPR_WORK[inv_move_num+spw_enemy][idpat] & 0x7f) == 0x05):
							#レインボーセット
							if((O_PWORK[P_RAINBOW] & 0x80) == 0):		#レインボーフラグチェック
								O_PWORK[P_RAINBOW] = 0x80

					if(game_flag & GF_DOWN):		#down move
						if((game_flag & GF_CAPT) == 0):
							O_SPR_WORK[inv_move_num+spw_enemy][ypos] = O_SPR_WORK[inv_move_num+spw_enemy][ypos] + 8
							if((game_flag & GF_UFO)==0):		#UFO出現準備
								game_flag |= GF_UFO
								ufo_counter = 0

					#移動し終わった、今自分のいる部分を書き込み
					if( O_SPR_WORK[inv_move_num+spw_enemy][mcnt] & 0x01 ):
						if((O_SPR_WORK[inv_move_num+spw_enemy][idpat] & 0x7f) == 5):
							code = DOT_PATTERN_IKA2
						elif((O_SPR_WORK[inv_move_num+spw_enemy][idpat] & 0x7f) == 4):
							code = DOT_PATTERN_KANI2
						elif((O_SPR_WORK[inv_move_num+spw_enemy][idpat] & 0x7f) == 3):
							code = DOT_PATTERN_TAKO2
					else:
						if((O_SPR_WORK[inv_move_num+spw_enemy][idpat] & 0x7f) == 5):
							code = DOT_PATTERN_IKA1
						elif((O_SPR_WORK[inv_move_num+spw_enemy][idpat] & 0x7f) == 4):
							code = DOT_PATTERN_KANI1
						elif((O_SPR_WORK[inv_move_num+spw_enemy][idpat] & 0x7f) == 3):
							code = DOT_PATTERN_TAKO1
					dot_pattern( 1, O_SPR_WORK[inv_move_num+spw_enemy][xpos], O_SPR_WORK[inv_move_num+spw_enemy][ypos], code , game_color_mode )

			#敵アニメカウントアップ
			O_SPR_WORK[inv_move_num+spw_enemy][mcnt] += 1
		else:
			game_flag |= GF_LOOP		#dead

		#invader move number add
		if( inv_move_num < INV_MAX-1 ):		#1 turn inner ?
			inv_move_num+=1
		else:
			#[SOUND]インベーダー歩行音
			#残り４個以下は出力を同じにする
			if( sound_cnt < 20 ):
				#INV移動音
				if( ( inv_move_cnt & 0x03 ) == 0 ):
					#[SOUND]歩行音１
					pyxel.play(3,34)	#ミ
					#pass
				elif( ( inv_move_cnt & 0x03 ) == 1 ):
					#[SOUND]歩行音２
					pyxel.play(3,35)	#ドb
					#pass
				elif( ( inv_move_cnt & 0x03 ) == 2 ):
					#[SOUND]歩行音３
					pyxel.play(3,36)	#シ
					#pass
				else: #if( ( inv_move_cnt & 0x03 ) == 3 ):
					#[SOUND]歩行音４
					pyxel.play(3,37)	#シb
					#pass
				inv_move_cnt+=1

			inv_move_num = 0
			turn_num+=1
			game_flag &= ~GF_DOWN	#F_DOWN clear

			#right side check
			exitFlg = 0
			for i in range(INV_HIGHT_MAX):		#right side check
				if(O_SPR_WORK[spw_enemy+right_side+(INV_WIDTH_MAX*i)][cond] & F_LIVE):
					if(O_PWORK[P_RAINBOW] & 0x40):	#レインボーフラグチェック
						if((game_flag & GF_MDEG) == 0):	#右移動？
							game_flag |= (GF_DOWN + GF_MDEG)
							exitFlg = 1
							break
					elif(O_SPR_WORK[spw_enemy+right_side+(INV_WIDTH_MAX*i)][xpos] >= LIM_E_RIGHT):
						O_SPR_WORK[spw_enemy+right_side+(INV_WIDTH_MAX*i)][xpos] = LIM_E_RIGHT
						game_flag |= (GF_DOWN + GF_MDEG)
					
						if(O_PWORK[P_RAINBOW] & 0x80):	#レインボーフラグチェック
							if((O_PWORK[P_RAINBOW] & 0x0f) >= 2):
								O_PWORK[P_RAINBOW] = O_PWORK[P_RAINBOW] | 0x40
								exitFlg = 1
								break

			if(1 != exitFlg):
				#left side check
				for i in range(INV_HIGHT_MAX):	#left side check
					if((O_SPR_WORK[spw_enemy+left_side+(INV_WIDTH_MAX*i)][cond] & F_LIVE) == F_LIVE):

						if(O_PWORK[P_RAINBOW] & 0x40):	#レインボーフラグチェック
							if(game_flag & GF_MDEG):
								game_flag |= GF_DOWN
								game_flag &= ~GF_MDEG
						elif(O_SPR_WORK[spw_enemy+left_side+(INV_WIDTH_MAX*i)][xpos] <= LIM_E_LEFT):
							game_flag |= GF_DOWN
							game_flag &= ~GF_MDEG

							if(O_PWORK[P_RAINBOW] & 0x80):	#レインボーフラグチェック
								O_PWORK[P_RAINBOW] = O_PWORK[P_RAINBOW] + 1

#---------------------------------------------------------------------------------------------------
#インベーダーの弾発生
def etama_check():

	global etama_counter2
	global etama_counter
	global etama_num
	global etama_cnt1
	global etama_cnt2

	i = 0
	j = 0
	k = 0
	flag0 = 0
	flag1 = 0
	flag2 = 0
	ce = 0
	cp = 0
	et_liveset = 0
	et_noset = 0

	#プレイヤー出現？
	if(O_SPR_WORK[spw_player][cond] & F_LIVE):

		#プレイヤー出現してから１３２カウント以内は弾出さない	
		if( etama_counter2 < 132 ):
			etama_counter2+=1
		else:

			#敵の弾は１個も出てない？ ＞ どれか１個は出現させる
			if((O_SPR_WORK[spw_etama+0][cond] & F_LIVE) == 0):
				if((O_SPR_WORK[spw_etama+1][cond] & F_LIVE) == 0):
					if((O_SPR_WORK[spw_etama+2][cond] & F_LIVE) == 0):
						et_liveset = 1
			if(O_PWORK[P_STAGE] < 1):
				if(inv_live_num <= 38):
					if(etama_counter >= 46):
						et_liveset = 1
					else:
						etama_counter+=1
						et_noset = 1
						et_liveset = 1
				else:
					et_noset = 1
					et_liveset = 1

			if(et_liveset == 0):
				if(((O_PWORK[P_STAGE] - 1) & 0x07) == 0):
					if(inv_live_num > 38):
						etama_counter+=1
						if(etama_counter >= 46):
							etama_counter = etama_counter
					else:
						if(etama_counter >= 32):
							etama_counter = etama_counter
						else:
							etama_counter+=1
				elif(((O_PWORK[P_STAGE] - 1) & 0x07) == 1):
					if(inv_live_num > 38):
						if(etama_counter >= 32):
							etama_counter = etama_counter
						else:
							etama_counter+=1
					else:
						if(etama_counter >= 22):
							etama_counter = etama_counter
						else:
							etama_counter+=1
				else:
					if(etama_counter >= 22):
						etama_counter = etama_counter
					else:
						etama_counter+=1
				et_noset = 1

			if(et_noset == 0):

				etama_counter = 0

				flag0 = 0
				flag1 = 0
				flag2 = 0	#敵数オールチェック
				while( flag0 == 0 ):
					#プレイヤーサーチ
					if( etama_num == 0 ):
						if(flag1 == 0):
							cp = O_SPR_WORK[spw_player][xpos]
							for j in range(INV_WIDTH_MAX):
								if(inv_hight[j] != 0xff):
									ce = O_SPR_WORK[spw_enemy+j+(INV_WIDTH_MAX*inv_hight[j])][xpos] + 0x07		#敵の中心
									if(ce >= cp):
										if(ce < (cp + 0x10)):
											num = spw_enemy+j+(INV_WIDTH_MAX*inv_hight[j])
											etama_set(num, 2)	#敵弾発生
											flag0 = 1		#処理終了
											break
							flag1 = 1
					#etama_tbl1
					if( etama_num == 1 ):
						if(etama_cnt1 >= 17):
							etama_cnt1 = 0
						j = etama_tbl1[etama_cnt1] - 1
						etama_cnt1+=1
						if( inv_hight[j] != 0xff ):
							num = spw_enemy+j+(INV_WIDTH_MAX*inv_hight[j])
							if(O_SPR_WORK[spw_enemy+num][cond] & F_LIVE):
								if((O_SPR_WORK[spw_enemy+num][cond] & F_HIT) == 0):
									etama_set(num, 1)	#敵弾発生
									flag0 = 1		#処理終了
					#etama_tbl2
					if( etama_num == 2 ):
						if(etama_cnt2 >= 17):
							etama_cnt2 = 0
						j = etama_tbl2[etama_cnt2] - 1
						etama_cnt2+=1
						if( inv_hight[j] != 0xff ):
							num = spw_enemy+j+(INV_WIDTH_MAX*inv_hight[j])
							if(O_SPR_WORK[spw_enemy+num][cond] & F_LIVE):
								if((O_SPR_WORK[spw_enemy+num][cond] & F_HIT) == 0):
									#UFOは出ていない？
									if((O_SPR_WORK[spw_ufo][cond] & F_LIVE)==0):
										etama_set(num, 0)	#敵弾発生
										flag0 = 1		#処理終了
					etama_num+=1
					if(etama_num > 3):
						etama_num = 0
					
					#敵全部チェックした？（生きていてもヒット中なら無限になる）
					flag2+=1
					if(flag2 > INV_MAX):
						flag0 = 1		#処理終了

#---------------------------------------------------------------------------------------------------
#敵弾発生 						
#	num : 発生させるスプライトの番号
def etama_set( num, etnum ):
	if(( game_flag & GF_PDEAD) == 0 ):		#プレイヤー爆発中は移動できない
		if(num >= spw_enemy):	#UFOが弾出さないように
			if(etnum < 3 ):
				if((O_SPR_WORK[spw_etama+etnum][cond] & F_LIVE) == 0):
					O_SPR_WORK[spw_etama+etnum][cond] = F_LIVE
					O_SPR_WORK[spw_etama+etnum][idpat] = 6
					O_SPR_WORK[spw_etama+etnum][xpos] = O_SPR_WORK[num][xpos]
					O_SPR_WORK[spw_etama+etnum][ypos] = O_SPR_WORK[num][ypos] + 10		#弾発生オフセット

#---------------------------------------------------------------------------------------------------
#インベーダーの弾移動
def etama_move():
	i = 0
	tamanum = 0
	for i in range(3):
		if(O_SPR_WORK[spw_etama+i][cond] & F_LIVE):
			if(O_SPR_WORK[spw_etama+i][cond] & F_HIT2):
				#弾削除
				tamanum = (i*4) + DOT_PATTERN_ETAMA11 + ((inv_tama[i]>>4) & 0x03)
				dot_pattern(0,O_SPR_WORK[spw_etama+i][xpos], O_SPR_WORK[spw_etama+i][ypos], tamanum, game_color_mode)
				#着弾描画
				dot_pattern(0,O_SPR_WORK[spw_etama+i][xpos], O_SPR_WORK[spw_etama+i][ypos] + 8, DOT_PATTERN_YBRK, game_color_mode)
				O_SPR_WORK[spw_etama+i][cond] = O_SPR_WORK[spw_etama+i][cond] | F_HIT
				O_SPR_WORK[spw_etama+i][idpat] = 0x0d #着弾
				inv_tama[i] = 0
				inv_tama2[i] = 0
				O_SPR_WORK[spw_etama+i][cond] = 0
			elif((O_SPR_WORK[spw_etama+i][cond] & F_HIT) == 0):
				inv_tama[i] = inv_tama[i] + 0x01
				if((inv_tama[i] & 0x0f) >= 4):
					#移動前に敵弾削除
					tamanum = (i*4) + DOT_PATTERN_ETAMA11 + ((inv_tama[i]>>4) & 0x03)
					dot_pattern(0,O_SPR_WORK[spw_etama+i][xpos],O_SPR_WORK[spw_etama+i][ypos], tamanum, game_color_mode)
					#弾移動
					O_SPR_WORK[spw_etama+i][ypos] = O_SPR_WORK[spw_etama+i][ypos] + 4
					inv_tama[i] = inv_tama[i] + 0x10
					inv_tama[i] = inv_tama[i] & 0xf0
				
					#一番下まで到達
					if(O_SPR_WORK[spw_etama+i][ypos] > LIM_ET_DOWN-1):
						O_SPR_WORK[spw_etama+i][ypos] = LIM_ET_DOWN-1 + 1

						#着弾描画
						dot_pattern(0,O_SPR_WORK[spw_etama+i][xpos], O_SPR_WORK[spw_etama+i][ypos], DOT_PATTERN_TBRK, game_color_mode)
						O_SPR_WORK[spw_etama+i][cond] = O_SPR_WORK[spw_etama+i][cond] | F_HIT
						O_SPR_WORK[spw_etama+i][idpat] = 0x0d #着弾
						inv_tama[i] = 0
						inv_tama2[i] = 0

						O_SPR_WORK[spw_etama+i][cond] = 0
					else:
						#弾描画
						tamanum = (i*4) + DOT_PATTERN_ETAMA11 + ((inv_tama[i]>>4) & 0x03)
						dot_pattern(1, O_SPR_WORK[spw_etama+i][xpos],O_SPR_WORK[spw_etama+i][ypos], tamanum, game_color_mode)
			elif(O_SPR_WORK[spw_etama+i][cond] & F_HIT):
				#弾消滅
				tamanum = (i*4) + DOT_PATTERN_ETAMA11 + ((inv_tama[i]>>4) & 0x03)
				dot_pattern(0,O_SPR_WORK[spw_etama+i][xpos],O_SPR_WORK[spw_etama+i][ypos], tamanum, game_color_mode)
				inv_tama[i] = 0
				inv_tama2[i] = 0

				O_SPR_WORK[spw_etama+i][cond] = 0

#---------------------------------------------------------------------------------------------------
#プレイヤー移動
def player_move():

	global appear_count
	global game_flag
	global shot_counter
	global scene_number
	global shot_condition

	i = 0
	j = 0

	#<<<<<< 登場チェック >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	if((O_SPR_WORK[spw_player][cond] & F_LIVE) != F_LIVE):
		if(appear_count >= 128):
			O_SPR_WORK[spw_player][cond] = O_SPR_WORK[spw_player][cond] | F_LIVE
			O_SPR_WORK[spw_player][idpat]= 0
			O_SPR_WORK[spw_player][xpos] = LIM_P_LEFT
			O_SPR_WORK[spw_player][ypos] = LIM_E_DOWN
			game_flag &= ~GF_RESTART
			
			#描画
			dot_pattern(1, O_SPR_WORK[spw_player][xpos],O_SPR_WORK[spw_player][ypos],DOT_PATTERN_HOUDAI, game_color_mode)
		else:
			appear_count+=1		#128INT後に登場
	elif(O_SPR_WORK[spw_player][cond] & F_HIT2):
		ppat = O_SPR_WORK[spw_player][mcnt] >> 2
		if( ppat & 0x01 ):
			#削除
			dot_box_erase(O_SPR_WORK[spw_player][xpos],O_SPR_WORK[spw_player][ypos])
			dot_pattern(1, O_SPR_WORK[spw_player][xpos],O_SPR_WORK[spw_player][ypos],DOT_PATTERN_PBRK2, game_color_mode)
		else:
			#削除
			dot_box_erase(O_SPR_WORK[spw_player][xpos],O_SPR_WORK[spw_player][ypos])
			dot_pattern(1, O_SPR_WORK[spw_player][xpos],O_SPR_WORK[spw_player][ypos],DOT_PATTERN_PBRK1, game_color_mode)
	
		O_SPR_WORK[spw_player][mcnt] += 1
		if( O_SPR_WORK[spw_player][mcnt] > 64 ):
			#削除
			dot_box_erase(O_SPR_WORK[spw_player][xpos],O_SPR_WORK[spw_player][ypos])
			O_SPR_WORK[spw_player][cond] = 0
			O_SPR_WORK[spw_player][mcnt] = 0
			rest_put(-1)		#残機-1
	
	elif(O_SPR_WORK[spw_player][cond] & F_HIT):
		#削除
		dot_box_erase(O_SPR_WORK[spw_player][xpos],O_SPR_WORK[spw_player][ypos])
		#クラッシュ描画
		dot_pattern(1, O_SPR_WORK[spw_player][xpos],O_SPR_WORK[spw_player][ypos],DOT_PATTERN_PBRK1, game_color_mode)
		game_flag |= GF_PDEAD		#プレイヤー爆発中
		O_SPR_WORK[spw_player][cond] |= F_HIT2
		O_SPR_WORK[spw_player][mcnt] = 0
		#[SOUND]プレイヤーやられ音
		pyxel.play(1,21)
	else:

		#<<<<<< 移動制御 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>	

		if pyxel.btnp(pyxel.KEY_RIGHT,1,1) or pyxel.btnp(pyxel.GAMEPAD1_BUTTON_DPAD_RIGHT,1,1):	#右？
			if(O_SPR_WORK[spw_player][xpos] < LIM_P_RIGHT):
				#移動前に削除
				dot_pattern(0,O_SPR_WORK[spw_player][xpos],O_SPR_WORK[spw_player][ypos],DOT_PATTERN_HOUDAI, game_color_mode)
				#移動
				O_SPR_WORK[spw_player][xpos] = O_SPR_WORK[spw_player][xpos] + 1
				#移動後に描画
				dot_pattern(1, O_SPR_WORK[spw_player][xpos],O_SPR_WORK[spw_player][ypos],DOT_PATTERN_HOUDAI, game_color_mode)
		elif pyxel.btnp(pyxel.KEY_LEFT,1,1) or pyxel.btnp(pyxel.GAMEPAD1_BUTTON_DPAD_LEFT,1,1):	#左？
			if(O_SPR_WORK[spw_player][xpos] > LIM_P_LEFT):
				#移動前に削除
				dot_pattern(0,O_SPR_WORK[spw_player][xpos],O_SPR_WORK[spw_player][ypos],DOT_PATTERN_HOUDAI, game_color_mode)
				#移動
				O_SPR_WORK[spw_player][xpos] = O_SPR_WORK[spw_player][xpos] - 1
				#移動後に描画
				dot_pattern(1, O_SPR_WORK[spw_player][xpos],O_SPR_WORK[spw_player][ypos],DOT_PATTERN_HOUDAI, game_color_mode)

		#<<<<<< 弾出し >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

		if pyxel.btnp(pyxel.KEY_Z, 60, 60) or pyxel.btnp(pyxel.GAMEPAD1_BUTTON_A,60,60):		#ショット（ひとまず押しっぱなし抑制はこれで対応）
			if((game_flag & GF_EHIT) == 0):	#敵爆発中は出せない
				if((O_SPR_WORK[spw_ptama][cond] & F_LIVE) == 0):
					if((O_SPR_WORK[spw_ptama][cond] & F_HIT) == 0):
						#[SOUND]プレイヤーショット音
						pyxel.play(1,19)
						O_SPR_WORK[spw_ptama][cond] = F_LIVE
						O_SPR_WORK[spw_ptama][idpat] = 0x01
						O_SPR_WORK[spw_ptama][xpos] = O_SPR_WORK[spw_player][xpos]
						O_SPR_WORK[spw_ptama][ypos] = O_SPR_WORK[spw_player][ypos] - 6
						shot_counter = shot_counter + 0x81
						if((shot_counter & 0x0f) == 0x0f):
							shot_counter = shot_counter & 0x80


#---------------------------------------------------------------------------------------------------
#プレイヤーの弾
def ptama_move():

	global save_shot_counter
	global ptama_crash

	if(O_SPR_WORK[spw_ptama][cond] & F_LIVE):
		if(O_SPR_WORK[spw_ptama][cond] & F_HIT2):	#着弾
			if( ptama_crash >= 16 ):
			#プレイヤーの弾消滅
				dot_pattern(0,O_SPR_WORK[spw_ptama][xpos], O_SPR_WORK[spw_ptama][ypos], DOT_PATTERN_PTAMA, game_color_mode)
				#着弾消滅
				dot_pattern(0,O_SPR_WORK[spw_ptama][xpos], O_SPR_WORK[spw_ptama][ypos], DOT_PATTERN_YBRK, game_color_mode)
				O_SPR_WORK[spw_ptama][cond] = 0x00
				O_SPR_WORK[spw_ptama][idpat] = 0x01
			else:
				ptama_crash+=1
		elif(O_SPR_WORK[spw_ptama][cond] & F_HIT):	#消滅
			#プレイヤーの弾消滅
			dot_pattern(0,O_SPR_WORK[spw_ptama][xpos], O_SPR_WORK[spw_ptama][ypos], DOT_PATTERN_PTAMA, game_color_mode)
			O_SPR_WORK[spw_ptama][cond] = 0x00
			O_SPR_WORK[spw_ptama][idpat] = 0x01
		elif(O_SPR_WORK[spw_ptama][ypos] <= LIM_PT_UP):
			dot_pattern(0,O_SPR_WORK[spw_ptama][xpos],O_SPR_WORK[spw_ptama][ypos],DOT_PATTERN_PTAMA, game_color_mode)
			O_SPR_WORK[spw_ptama][cond] = 0
			O_SPR_WORK[spw_ptama][idpat] = 0x01
			ptama_crash = 0
		else:
			#移動前に削除
			dot_pattern(0,O_SPR_WORK[spw_ptama][xpos], O_SPR_WORK[spw_ptama][ypos], DOT_PATTERN_PTAMA, game_color_mode)
			#移動
			O_SPR_WORK[spw_ptama][ypos] = O_SPR_WORK[spw_ptama][ypos] - 4
			#描画
			dot_pattern(1, O_SPR_WORK[spw_ptama][xpos], O_SPR_WORK[spw_ptama][ypos], DOT_PATTERN_PTAMA, game_color_mode)


#---------------------------------------------------------------------------------------------------
#UFO移動
def ufo_move():

	global ufo_counter
	global save_shot_counter

	if((O_SPR_WORK[spw_ufo][cond] & F_LIVE) == 0):
		if(( game_flag & GF_PDEAD) == 0 ):	#プレイヤー爆発中は発生できない
			if(game_flag & GF_UFO):	#UFO 出現準備完了？
				ufo_counter+=1
				if(ufo_counter > 1536):
					ufo_counter = 0

					#インベーダーは７体越える数存在している？
					if(inv_live_num > 7):

						if(shot_counter & 0x80):
							O_SPR_WORK[spw_ufo][cond] = F_LIVE + F_UDEG
							O_SPR_WORK[spw_ufo][xpos] = LIM_U_LEFT
						else:
							O_SPR_WORK[spw_ufo][cond] = F_LIVE
							O_SPR_WORK[spw_ufo][xpos] = LIM_U_RIGHT
						O_SPR_WORK[spw_ufo][ypos] = 0x28
						O_SPR_WORK[spw_ufo][idpat] = 2
						#[SOUND]音ループ開始
						pyxel.play(0,10,loop=True)

	#ヒット２中はボーナスポイント出現
	#ボーナスポイントはプレイヤーの弾とヒットチェックあり＆欠けるので毎回描く
	elif(O_SPR_WORK[spw_ufo][cond] & F_HIT2):
		O_SPR_WORK[spw_ufo][mcnt] += 1
		if(O_SPR_WORK[spw_ufo][mcnt] > 74):
			#dot_pattern(0,O_SPR_WORK[spw_ufo][xpos],O_SPR_WORK[spw_ufo][ypos],DOT_PATTERN_UFO, game_color_mode)
			dot_ufobox_erase(O_SPR_WORK[spw_ufo][xpos],O_SPR_WORK[spw_ufo][ypos])
			O_SPR_WORK[spw_ufo][cond] = 0
			O_SPR_WORK[spw_ufo][mcnt] = 0
		else:
			#UFOボーナス表示
			if(( ufo_score[save_shot_counter & 0x0f]) == 50 ):
				num = DOT_PATTERN_UFO050
			elif(( ufo_score[save_shot_counter & 0x0f]) == 100 ):
				num = DOT_PATTERN_UFO100
			elif(( ufo_score[save_shot_counter & 0x0f]) == 150 ):
				num = DOT_PATTERN_UFO150
			elif(( ufo_score[save_shot_counter & 0x0f]) == 300 ):
				num = DOT_PATTERN_UFO300
			else:
				num = 99
			if( num != 99 ):
				dot_pattern(1, O_SPR_WORK[spw_ufo][xpos],O_SPR_WORK[spw_ufo][ypos],num, game_color_mode)

	#ヒット
	elif(O_SPR_WORK[spw_ufo][cond] & F_HIT):
		#[SOUND]音ループ終了
		pyxel.stop(0)
		#消滅
		dot_pattern(0,O_SPR_WORK[spw_ufo][xpos],O_SPR_WORK[spw_ufo][ypos],DOT_PATTERN_UFO, game_color_mode)
		O_SPR_WORK[spw_ufo][cond] |= F_HIT2
		O_SPR_WORK[spw_ufo][mcnt] = 0

		#UFOスコア加算
		save_shot_counter = shot_counter
		score_add( ufo_score[save_shot_counter & 0x0f] )
		#UFOボーナス表示
		if(( ufo_score[save_shot_counter & 0x0f]) == 50 ):
			num = DOT_PATTERN_UFO050
		elif(( ufo_score[save_shot_counter & 0x0f]) == 100 ):
			num = DOT_PATTERN_UFO100
		elif(( ufo_score[save_shot_counter & 0x0f]) == 150 ):
			num = DOT_PATTERN_UFO150
		elif(( ufo_score[save_shot_counter & 0x0f]) == 300 ):
			num = DOT_PATTERN_UFO300
		else:
			num = 99
		if( num != 99 ):
			dot_pattern(1, O_SPR_WORK[spw_ufo][xpos],O_SPR_WORK[spw_ufo][ypos],num, game_color_mode)

	#移動
	else:
		ufo_counter+=1
		if(ufo_counter > 3):
			ufo_counter = 0
			if(O_SPR_WORK[spw_ufo][cond] & F_UDEG):		#left appear ?
				#移動前に削除
				dot_pattern(0,O_SPR_WORK[spw_ufo][xpos],O_SPR_WORK[spw_ufo][ypos],DOT_PATTERN_UFO, game_color_mode)
				#移動
				O_SPR_WORK[spw_ufo][xpos] = O_SPR_WORK[spw_ufo][xpos] + 2
				if(O_SPR_WORK[spw_ufo][xpos] >= LIM_U_RIGHT):
					#[SOUND]音ループ終了
					pyxel.stop(0)
					O_SPR_WORK[spw_ufo][cond] = 0
				else:
					#描画
					dot_pattern(1, O_SPR_WORK[spw_ufo][xpos],O_SPR_WORK[spw_ufo][ypos],DOT_PATTERN_UFO, game_color_mode)
			else:
				#移動前に削除
				dot_pattern(0,O_SPR_WORK[spw_ufo][xpos],O_SPR_WORK[spw_ufo][ypos],DOT_PATTERN_UFO, game_color_mode)
				#移動
				O_SPR_WORK[spw_ufo][xpos] = O_SPR_WORK[spw_ufo][xpos] - 2
				if(O_SPR_WORK[spw_ufo][xpos] <= LIM_U_LEFT):
					#[SOUND]音ループ終了
					pyxel.stop(0)
					O_SPR_WORK[spw_ufo][cond] = 0
				else:
					#描画
					dot_pattern(1, O_SPR_WORK[spw_ufo][xpos],O_SPR_WORK[spw_ufo][ypos],DOT_PATTERN_UFO, game_color_mode)

#---------------------------------------------------------------------------------------------------
#ヒットチェック													
#		該当座標のドットの有無でチェック
#		サイズ範囲で該当物を確認する
def hit_check():
	i = 0
	j = 0
	check_data = 0
	cx = 0
	cy = 0
	tx = 0
	ty = 0
	hitset = 0

	#プレイヤー弾（X+7,Y+0）
	if( (O_SPR_WORK[spw_ptama][cond] & F_LIVE) and
		((O_SPR_WORK[spw_ptama][cond] & (F_HIT+F_HIT2)) == 0) ):
		tx = O_SPR_WORK[spw_ptama][xpos] + 7
		ty = O_SPR_WORK[spw_ptama][ypos] - 0

		#敵チェック（範囲チェック）
		hitset = 0
		for i in range(INV_MAX):
			if( ( O_SPR_WORK[spw_enemy+i][cond] & F_LIVE) and
				((O_SPR_WORK[spw_enemy+i][cond] & (F_HIT+F_HIT2)) == 0) ):
				
				if(O_SPR_WORK[spw_enemy+i][idpat]  == 3):	#上（X+3～+10,Y+0～+7）
					if( ((O_SPR_WORK[spw_enemy+i][xpos] + 3  -1) <= tx) and
						((O_SPR_WORK[spw_enemy+i][xpos] + 10 +1) >= tx) ):
						if( ((O_SPR_WORK[spw_enemy+i][ypos] + 0 -4) <= ty) and
							((O_SPR_WORK[spw_enemy+i][ypos] + 7 +1) >= ty) ):
							hitset = 1
							O_SPR_WORK[spw_ptama][cond] |= F_HIT	#プレイヤー弾ヒットセット
							O_SPR_WORK[spw_enemy+i][cond] |= F_HIT	#敵ヒットセット
							#[SOUND]INV HIT音
							pyxel.play(1,16)
							break
				elif(O_SPR_WORK[spw_enemy+i][idpat]  == 4):		#中（X+2～+12,Y+0～+7）
					if( ((O_SPR_WORK[spw_enemy+i][xpos] + 2 -1) <= tx) and
						((O_SPR_WORK[spw_enemy+i][xpos] + 12+1) >= tx) ):
						if( ((O_SPR_WORK[spw_enemy+i][ypos] + 0-4) <= ty) and
							((O_SPR_WORK[spw_enemy+i][ypos] + 7+1) >= ty) ):
							hitset = 1
							O_SPR_WORK[spw_ptama][cond] |= F_HIT	#プレイヤー弾ヒットセット
							O_SPR_WORK[spw_enemy+i][cond] |= F_HIT	#敵ヒットセット
							#[SOUND]INV HIT音
							pyxel.play(1,16)
							break
				elif(O_SPR_WORK[spw_enemy+i][idpat]  == 5):		#下（X+1～+12,Y+0～+7）
					if( ((O_SPR_WORK[spw_enemy+i][xpos] + 1 -1) <= tx) and
						((O_SPR_WORK[spw_enemy+i][xpos] + 12+1) >= tx) ):
						if( ((O_SPR_WORK[spw_enemy+i][ypos] + 0-4) <= ty) and
							((O_SPR_WORK[spw_enemy+i][ypos] + 7+1) >= ty) ):
							hitset = 1
							O_SPR_WORK[spw_ptama][cond] |= F_HIT	#プレイヤー弾ヒットセット
							O_SPR_WORK[spw_enemy+i][cond] |= F_HIT	#敵ヒットセット
							#[SOUND]INV HIT音
							pyxel.play(1,16)
							break
		
		#UFOチェック（X+1～+16,Y+0～+6）
		if( hitset == 0 ):
			if( ( O_SPR_WORK[spw_ufo][cond] & F_LIVE) and
				((O_SPR_WORK[spw_ufo][cond] & (F_HIT+F_HIT2)) == 0) ):
				if( ((O_SPR_WORK[spw_ufo][xpos] + 1 ) <= tx) and
					((O_SPR_WORK[spw_ufo][xpos] + 16) >= tx) ):
					if( ((O_SPR_WORK[spw_ufo][ypos] + 0-4) <= ty) and
						((O_SPR_WORK[spw_ufo][ypos] + 6+1) >= ty) ):
						hitset = 1
						O_SPR_WORK[spw_ptama][cond] |= F_HIT	#プレイヤー弾ヒットセット
						O_SPR_WORK[spw_ufo][cond] |= F_HIT		#UFOヒットセット
						#[SOUND]INV HIT音
						pyxel.play(1,15)

		#ドット有無チェック
		if( hitset == 0 ):
			check_data = dot_check( tx, ty )
			if(check_data == 1):
				#敵弾チェック(X+7,Y=+1～+9)
				for i in range(3):
					if( ( O_SPR_WORK[spw_etama+i][cond] & F_LIVE) and
						((O_SPR_WORK[spw_etama+i][cond] & (F_HIT+F_HIT2)) == 0) ):
						if( O_SPR_WORK[spw_etama+i][xpos] == tx ):
							if( ((O_SPR_WORK[spw_etama+i][ypos] + 1) <= ty) and
								((O_SPR_WORK[spw_etama+i][ypos] + 9) >= ty) ):
								hitset = 1
								O_SPR_WORK[spw_ptama][cond] |= F_HIT	#プレイヤー弾ヒットセット
								O_SPR_WORK[spw_etama+i][cond] |= F_HIT	#敵弾ヒットセット
								break

				#砦等BG
				if( hitset == 0 ):
					if( ty > 0xb0 ):
						O_SPR_WORK[spw_ptama][cond] |= F_HIT2	#プレイヤー弾着弾ヒットセット

	#敵弾(X+7,Y=+9)
	for i in range(3):
		if( (O_SPR_WORK[spw_etama+i][cond] & F_LIVE) and
			((O_SPR_WORK[spw_etama+i][cond] & (F_HIT+F_HIT2)) == 0) ):
			tx = O_SPR_WORK[spw_etama+i][xpos] + 7
			ty = O_SPR_WORK[spw_etama+i][ypos] + 10
			hitset = 0

			#ドット有無チェック
			check_data = dot_check( tx, ty )
			if(check_data == 1):
				if( hitset == 0 ):
					#プレイヤーチェック(X=+1～+13,Y+0～+7)
					if( ( O_SPR_WORK[spw_player][cond] & F_LIVE) and
						((O_SPR_WORK[spw_player][cond] & (F_HIT+F_HIT2)) == 0) ):
						if( ((O_SPR_WORK[spw_player][xpos] + 1 ) <= tx) and
							((O_SPR_WORK[spw_player][xpos] + 13) >= tx) ):
							if( ((O_SPR_WORK[spw_player][ypos] + 0) <= ty) and
								((O_SPR_WORK[spw_player][ypos] + 7) >= ty) ):
								hitset = 1
								O_SPR_WORK[spw_player][cond] |= F_HIT	#プレイヤーヒットセット
								O_SPR_WORK[spw_etama+i][cond] |= F_HIT	#敵弾ヒットセット
								break

				#砦等BG
				if( hitset == 0 ):
					O_SPR_WORK[spw_etama+i][cond] |= F_HIT2	#敵弾着弾ヒットセット



#---------------------------------------------------------------------------------------------------
#描画（メイン制御）
def draw():

	global scene_number
	global high_score
	global title_counter
	global game_flag
	global game_color_mode
	global now_score
	global gameover_counter
	global ranking_counter
	global move_speed

	global name_entry_counter
	global entry
	global entry_select
	global entry_select_old
	global entry_rank
	global playtime
	global playtime_save
	global setmoji
	
	#-----------------------------------
	if scene_number == SCENE_POWERON:

		#ランキング初期データ
		RANK_SCORE_WORK[0] = 1500
		RANK_SCORE_WORK[1] = 500
		RANK_SCORE_WORK[2] = 400
		RANK_SCORE_WORK[3] = 300
		RANK_SCORE_WORK[4] = 200
		RANK_SCORE_WORK[5] = 100
		RANK_SCORE_WORK[6] = 80
		RANK_SCORE_WORK[7] = 60
		RANK_SCORE_WORK[8] = 40
		RANK_SCORE_WORK[9] = 20

		RANK_STAGE_WORK[0] = 2
		RANK_STAGE_WORK[1] = 1
		RANK_STAGE_WORK[2] = 1
		RANK_STAGE_WORK[3] = 1
		RANK_STAGE_WORK[4] = 1
		RANK_STAGE_WORK[5] = 1
		RANK_STAGE_WORK[6] = 1
		RANK_STAGE_WORK[7] = 1
		RANK_STAGE_WORK[8] = 1
		RANK_STAGE_WORK[9] = 1

		RANK_NAME_WORK[0] = [0x00, 0x1a, 0x00, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a]	#"A.A       "
		RANK_NAME_WORK[1] = [0x01, 0x1a, 0x01, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a]	#"B.B       "
		RANK_NAME_WORK[2] = [0x02, 0x1a, 0x02, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a]	#"C.C       "
		RANK_NAME_WORK[3] = [0x03, 0x1a, 0x03, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a]	#"D.D       "
		RANK_NAME_WORK[4] = [0x04, 0x1a, 0x04, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a]	#"E.E       "
		RANK_NAME_WORK[5] = [0x05, 0x1a, 0x05, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a]	#"F.F       "
		RANK_NAME_WORK[6] = [0x06, 0x1a, 0x06, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a]	#"G.G       "
		RANK_NAME_WORK[7] = [0x07, 0x1a, 0x07, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a]	#"H.H       "
		RANK_NAME_WORK[8] = [0x08, 0x1a, 0x08, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a]	#"I.I       "
		RANK_NAME_WORK[9] = [0x09, 0x1a, 0x09, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a]	#"J.J       "

		high_score = RANK_SCORE_WORK[0]
		scene_number = SCENE_INIT

	#-----------------------------------
	elif scene_number == SCENE_INIT:
		init()
		clear_screen()
		title_counter = 0
		game_flag = 0
		draw_score()
		ranking_counter = 0
		scene_number = SCENE_TITLE

	#-----------------------------------
	elif scene_number == SCENE_TITLE:
		num = 0
		ofs = (RADIUS2 + DDOT2)/2
		kankaku = TT_KANKAKU
		xp = title_xoff
		yp = title_yoff
		title_counter += 1
		title_counter2 = title_counter

		if((title_counter2 >= 32) and ( title_counter2 < (16+8+4)*4 + 32 )):
			num = (title_counter2 - 32) >> 2
			if((num >= 0) and (num < 16)):
				line_pattern( 1, xp, (yp +                                             ( num      * ofs)), 0x00 )
			elif((num >= (16+0)) and (num < (16+8))):
				line_pattern( 1, xp, (yp + (16*ofs) + kankaku) +                       ((num-16)  * ofs),  0x11 )
#			elif((num >= (16+8)) and (num < (16+8+4))):
#				line_pattern( 1, xp, (yp + (16*ofs) + kankaku) + ((8*ofs) + kankaku) + ((num-16-8) * ofs), 0x1a )
		elif(( title_counter2 >= (16+8+4)*4 + 32 ) and ( title_counter2 < (16+8+4)*8 + 32 )):
			num = ( title_counter2 - 32 - (16+8+4)*4 ) >> 2
			if((num >= 0) and (num < 16)):
				line_pattern( 0, xp, (yp + (num * ofs)), 0x00 )
				line_pattern( 1, xp, (yp + (num * ofs)), 1+num )
			elif((num >= (16+0)) and (num < (16+8))):
				line_pattern( 0, xp, (yp + (16*ofs) + kankaku) + ((num-16) * ofs), 0x11 )
				line_pattern( 1, xp, (yp + (16*ofs) + kankaku) + ((num-16) * ofs), 18+(num-16) )
#			elif((num >= (16+8)) and (num < (16+8+4))):
#				line_pattern( 0, xp, (yp + (16*ofs) + kankaku) + ((8*ofs) + kankaku) + ((num-16-8) * ofs), 0x1a )
#				line_pattern( 1, xp, (yp + (16*ofs) + kankaku) + ((8*ofs) + kankaku) + ((num-16-8) * ofs), 0x1b+(num-24) )
		elif(( title_counter2 >= (16+8+4)*8 + 32 ) and ( title_counter2 < (16+8+4)*8 + 32 + 1 )):
			#set_font_text( 0x5c, 0xa8, 'VER.0.97', 0, 0 )
			set_font_text( 0x54, 0xa8, '07.24.2024', 0, 0 )
			set_font_text( 0x18, 0xb8, 'PUSH SELECT OR X IS START', 0, 0 )
			set_font_text( 0x20, 0xc4, '( RETURN KEY IS START )', 0, 0 )
			set_font_text( 0x08, 0xd8, 'PUSH START OR Y IS COLOR START', 0, 0 )
			set_font_text( 0x10, 0xe4, '( SPACE KEY IS COLOR START )', 0, 0 )
		else:
			ranking_counter+=1
			if( ranking_counter > 1000 ):
				scene_number = SCENE_RANKING_INIT
				ranking_counter = 0
				
		draw_score()

		if pyxel.btn(pyxel.KEY_SPACE) or pyxel.btn(pyxel.GAMEPAD1_BUTTON_START) or pyxel.btn(pyxel.GAMEPAD1_BUTTON_Y):
			game_color_mode = 1
			scene_number = SCENE_START
			#[SOUND]START音
			pyxel.play(1,33)

		if pyxel.btn(pyxel.KEY_RETURN) or pyxel.btn(pyxel.GAMEPAD1_BUTTON_BACK) or pyxel.btn(pyxel.GAMEPAD1_BUTTON_X):
			game_color_mode = 0
			scene_number = SCENE_START
			#[SOUND]START音
			pyxel.play(1,32)

	#-----------------------------------
	elif scene_number == SCENE_START:
		#スタート準備
		O_PWORK[P_STAGE] = 0	#ステージ数初期値
		O_PWORK[P_REST] = 2		#残機初期値
		now_score = 0			#スコア初期
		high_score = RANK_SCORE_WORK[0]
		draw_score()
		playtime = 0
		playtime_save = 0
		scene_number = SCENE_RESTART

	#-----------------------------------
	elif scene_number == SCENE_RESTART:
		clear_screen()
		init()
		draw_score()
		scene_number = SCENE_GAME_INIT

	#-----------------------------------
	elif scene_number == SCENE_GAME_INIT:

		#インベーダーLIVEセット
		for i in range(INV_MAX):
			if((O_SPR_WORK[spw_enemy+i][cond] & F_ACTIVE) == F_ACTIVE):
				O_SPR_WORK[spw_enemy+i][cond] = O_SPR_WORK[spw_enemy+i][cond] | F_LIVE

		#砦LIVEセット
		for i in range(4):
			if((O_SPR_WORK[spw_toride+i][cond] & F_ACTIVE) == F_ACTIVE):
				O_SPR_WORK[spw_toride+i][cond] = O_SPR_WORK[spw_toride+i][cond] | F_LIVE
				#描画
				dot_pattern( 1, O_SPR_WORK[spw_toride+i][xpos], O_SPR_WORK[spw_toride+i][ypos], DOT_PATTERN_TOCHIKA, game_color_mode )
		
		#下部ライン描画
		for yp in range( LIM_DOWN, LIM_DOWN+2 ):
			for xp in range( LIM_LEFT, LIM_RIGHT ):
				dot_put( xp, yp, game_color_mode )

		#残機数表示
		rest_put(0)

		draw_score()
		scene_number = SCENE_GAME

	#-----------------------------------
	#ゲームメイン
	elif scene_number == SCENE_GAME:

		# ヒットチェック
		hit_check()
		#プレイヤー移動
		player_move()
		#プレイヤーの弾制御
		ptama_move()
		#UFO移動
		ufo_move()
		#敵弾の動き
		etama_move()

		#生存数に合わせて移動量増える
		if( inv_live_num == 1 ):
			move_speed = 70
		elif( inv_live_num == 2 ):
			move_speed = 40
		elif( inv_live_num == 3 ):
			move_speed = 30
		elif( inv_live_num == 4 ):
			move_speed = 20
		elif(( inv_live_num >= 5 ) and ( inv_live_num < 10 )):
			move_speed = 10
		elif(( inv_live_num >= 10 ) and ( inv_live_num < 20 )):
			move_speed = 5
		elif(( inv_live_num >= 20 ) and ( inv_live_num < 30 )):
			move_speed = 3
		elif(( inv_live_num >= 30 ) and ( inv_live_num < 40 )):
			move_speed = 2
		else:
			move_speed = 1

		for mvcnt in range( move_speed ):
			#インベーダー動き
			invader_move()

		#占領チェック
		capture_check()
		#インベーダー全滅チェック
		inv_all_dead_check()

		#敵弾発生チェック
		etama_check()
		draw_score()

	#-----------------------------------
	elif scene_number == SCENE_GAMEOVER_READY:

		i = 0
		j = 0
		k = 0

		#[UFO SOUND STOP]
		pyxel.stop(0)

		#エントリーするランク（順位）を取得する
		entry_rank = 0

		#スコア更新
		if( high_score < now_score ):
			high_score = now_score
			game_flag |= GF_SCUPDATE	#ハイスコア更新

		#ランキングソート
		for i in range(10):
			if( RANK_SCORE_WORK[i] < now_score ):
				#以降をソート
				for j in range((10-1), i, -1):
					RANK_SCORE_WORK[j] = RANK_SCORE_WORK[j-1]
					RANK_STAGE_WORK[j] = RANK_STAGE_WORK[j-1]
					RANK_NAME_WORK[j] = RANK_NAME_WORK[j-1]

				#挿入
				if( i == 0 ):
					#先頭ならハイスコア更新
					high_score = now_score

				RANK_SCORE_WORK[i] = now_score
				RANK_STAGE_WORK[i] = O_PWORK[P_STAGE]
				RANK_NAME_WORK[i] = [0x1a,0x1a,0x1a,0x1a,0x1a,0x1a,0x1a,0x1a,0x1a,0x1a]
				entry_rank = i
				game_flag |= GF_SCUPDATE;	#スコア更新
				break

		gameover_counter = 0
		set_font_text( 0x54, 0x90, 'GAME  OVER', 0, 0 )

		draw_score()
		scene_number = SCENE_GAMEOVER

	#-----------------------------------
	elif scene_number == SCENE_GAMEOVER:
		gameover_counter+=1
		if( gameover_counter > 500 ):
			#[SOUND ALL STOP]
			pyxel.stop()
			if( game_flag & GF_SCUPDATE ):
				scene_number = SCENE_NAME_ENTRY_INIT
			else:
				scene_number = SCENE_RANKING_INIT
		draw_score()

	#-----------------------------------
	#ネームエントリー初期化
	elif scene_number == SCENE_NAME_ENTRY_INIT:
		clear_screen()
		set_font_text( 0x50, 0x24, 'SCORE RANKING', 0, game_color_mode )
		for i in range(10):
			set_font_text( RANK_POS_RANK,                    0x3c+(i*0x0c), int2str(i+1, 10),                1, game_color_mode )
			set_font_text( RANK_POS_RANK+RANK_POS_POINT_OFS, 0x3c+(i*0x0c), int2str(RANK_SCORE_WORK[i], 10), 1, game_color_mode )
			set_font_text( RANK_POS_RANK+RANK_POS_STAGE_OFS, 0x3c+(i*0x0c), int2str(RANK_STAGE_WORK[i], 10), 1, game_color_mode )

			if( i != entry_rank ):
				for j in range(NAME_MOJI_MAX):
					set_font_text( RANK_POS_RANK+RANK_POS_NAME_OFS+(j*8), 0x3c+(i*0x0c), code2str(RANK_NAME_WORK[i][j]), 0, game_color_mode );
			else:
				for j in range(NAME_MOJI_MAX):
					set_font_text( RANK_POS_RANK+RANK_POS_NAME_OFS+(j*8), 0x3c+(i*0x0c), code2str(setmoji[j]),           0, game_color_mode );

		set_font_text( 0x1c, 0xc8, 'LEFT AND RIGHT IS SELECT', 0, 0 )
		set_font_text( 0x28, 0xd4, 'PUSH A-BUTTON IS SET', 0, 0 )
		set_font_text( 0x28, 0xe0, '  ( Z-KEY IS SET )', 0, 0 )

		entry = 0
		entry_select = 0
		entry_select_old = 0
		name_entry_counter = 0

		draw_score()
		ranking_counter = 0
		scene_number = SCENE_NAME_ENTRY

	#-----------------------------------
	#ネームエントリー
	elif scene_number == SCENE_NAME_ENTRY:
		if (entry >= 0) and (entry < 10):		#文字選択（１文字目～１０文字目）
			if pyxel.btnp(pyxel.KEY_Z, 60, 60) or pyxel.btnp(pyxel.GAMEPAD1_BUTTON_A,60,60):
				#[TO-SOUND]決定音
				pyxel.play(1,4)
				if( entry_select == 0x28 ):	#終了
					entry = NAME_MOJI_MAX
					entry_select = 0
				elif( entry_select == 0x29 ):	#1文字戻る
					if( entry <= 0 ):
						entry = 0
					else:
						entry-=1

				else:
					entry+=1
					entry_select = 0

			elif pyxel.btnp(pyxel.KEY_LEFT,60,60) or pyxel.btnp(pyxel.GAMEPAD1_BUTTON_DPAD_LEFT,60,60):	#左？
				if( entry_select <= 0 ):
					entry_select = 0x29
				else:
					entry_select-=1

			elif pyxel.btnp(pyxel.KEY_RIGHT,60,60) or pyxel.btnp(pyxel.GAMEPAD1_BUTTON_DPAD_RIGHT,60,60):	#右？
				if( entry_select >= 0x29 ):
					entry_select = 0
				else:
					entry_select+=1

			if( entry < NAME_MOJI_MAX ):
				if( entry_select < 0x2A ):
					setmoji[entry] = entry_select


		elif entry == NAME_MOJI_MAX:	#文字決定
			for i in range(10):
				#END検索、以後の文字クリア
				if( setmoji[i] == 0x28 ):
					for j in range(i, NAME_MOJI_MAX):
						setmoji[j] = 0x2a		#' '
					break

			for j in range(10):
				RANK_NAME_WORK[entry_rank][j] = setmoji[j]

			entry = NAME_MOJI_MAX+2;
			ranking_counter = 0;
		elif entry == NAME_MOJI_MAX+1:	#文字決定
			pass
		elif entry == NAME_MOJI_MAX+2:	#文字決定
			#文字決定後
			ranking_counter+=1
			if( ranking_counter > 200 ):
				scene_number = SCENE_RANKING_INIT
				#[SOUND]決定音（不要）
				#pyxel.play(1,27)
		else:
			print( "draw NAME-ENTRY ##-ERROR-## entry:"+entry )

		name_entry_counter+=1

		#文字表示
		for i in range(NAME_MOJI_MAX):
			set_font_text( RANK_POS_RANK+RANK_POS_NAME_OFS+(i*8), 0x3c+(entry_rank*0x0c), code2str(setmoji[i]), 0, game_color_mode )

		#選択中の文字点滅
		if( entry < NAME_MOJI_MAX ):
			dot_entrybox_erase( RANK_POS_RANK+RANK_POS_NAME_OFS+(entry*8), 0x3c+(entry_rank*0x0c) )
			if( ( name_entry_counter >> 1 ) & 0x03 ):
				set_font_text( RANK_POS_RANK+RANK_POS_NAME_OFS+(entry*8), 0x3c+(entry_rank*0x0c), code2str(setmoji[entry]), 0, game_color_mode )

		draw_score()

	#-----------------------------------
	#ランキング初期化
	elif scene_number == SCENE_RANKING_INIT:
		#画面準備
		clear_screen()
		set_font_text( 0x48, 0x24, 'SCORE RANKING', 0, game_color_mode )

		for i in range(10):
			set_font_text( RANK_POS_RANK,                    0x3c+(i*0x0c), int2str(i+1, 10),                1, game_color_mode )
			set_font_text( RANK_POS_RANK+RANK_POS_POINT_OFS, 0x3c+(i*0x0c), int2str(RANK_SCORE_WORK[i], 10), 1, game_color_mode )
			set_font_text( RANK_POS_RANK+RANK_POS_STAGE_OFS, 0x3c+(i*0x0c), int2str(RANK_STAGE_WORK[i], 10), 1, game_color_mode )
			for j in range(NAME_MOJI_MAX):
				set_font_text( RANK_POS_RANK+RANK_POS_NAME_OFS+(j*8),  0x3c+(i*0x0c), code2str(RANK_NAME_WORK[i][j]), 0, game_color_mode );

		set_font_text( 0x28, 0xd4, 'PUSH A-BUTTON IS EXIT', 0, 0 )
		set_font_text( 0x28, 0xe0, '  ( Z-KEY IS EXIT )', 0, 0 )

		draw_score()
		ranking_counter = 0
		scene_number = SCENE_RANKING
	
	#-----------------------------------
	elif scene_number == SCENE_RANKING:
		ranking_counter+=1
		if(ranking_counter > 300):
			scene_number = SCENE_INIT

		if pyxel.btn(pyxel.KEY_Z) or pyxel.btn(pyxel.GAMEPAD1_BUTTON_A):
			scene_number = SCENE_INIT
		draw_score()

	#-----------------------------------
	else:
		scene_number = SCENE_INIT


#更新（未使用）
def update():
	pass

#==============================================================================================================
#初期化から実行へ
#pyxel.init(SCREEN_WIDTH, SCREEN_HEIGHT, fps=60)
#[use Web]ESCキーを無効化
pyxel.init(SCREEN_WIDTH, SCREEN_HEIGHT, fps=60, quit_key=pyxel.KEY_NONE, title='pyxelinv')
#サウンドリソース読み込み
#ch.0 UFO loop
#ch.1 in Game
#ch.2 etc.(EXTRA)
#ch.3 Walk
pyxel.load("rpg-sepack.pyxres")
#パレット変更
pyxel.colors[1] = 0x00FF00		#GREEN
pyxel.colors[2] = 0x00FFFF		#MIZUIRO
pyxel.colors[3] = 0xFF00FF		#PURPLE
pyxel.colors[4] = 0xFFFF00		#YELLOW
pyxel.colors[5] = 0xFF0000		#RED
pyxel.colors[6] = 0x0000FF		#BLUE
pyxel.colors[7] = 0xFFFFFF		#WHITE
pyxel.run(update, draw)
